package formularios;

import clases.bdConexion;
import clases.citas;
import clases.paciente;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author laptop-1
 */
public class frmCitas extends javax.swing.JInternalFrame {

    bdConexion con;
    citas c = new citas();
    paciente p = new paciente();
    Object[][] dtCitas; //variable de tipo Object que almacena una matriz de datos
    int fila=-1;
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmBuscarPaciente = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        txtValorFiltro = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPacientes = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        grupoHorario = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        lblNuevaCita = new javax.swing.JLabel();
        lblGuardarCambios = new javax.swing.JLabel();
        lblCancelarCambios = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        txtHoraSistema = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelCitas = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIdPaciente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDireccion = new javax.swing.JTextArea();
        btnBuscarPaciente = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        lblNumeroCita = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jdFechaCita = new com.toedter.calendar.JDateChooser();
        optH1 = new javax.swing.JRadioButton();
        optH2 = new javax.swing.JRadioButton();
        optH3 = new javax.swing.JRadioButton();
        optH4 = new javax.swing.JRadioButton();
        optH5 = new javax.swing.JRadioButton();
        optH6 = new javax.swing.JRadioButton();
        optH7 = new javax.swing.JRadioButton();
        optH8 = new javax.swing.JRadioButton();
        optH10 = new javax.swing.JRadioButton();
        optH9 = new javax.swing.JRadioButton();
        optH11 = new javax.swing.JRadioButton();
        optH12 = new javax.swing.JRadioButton();
        optH13 = new javax.swing.JRadioButton();
        optH14 = new javax.swing.JRadioButton();
        optH15 = new javax.swing.JRadioButton();
        optH16 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        btnVerHorarioDisponible = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        frmBuscarPaciente.setTitle("Pacientes");
        frmBuscarPaciente.setBounds(new java.awt.Rectangle(0, 0, 550, 300));
        frmBuscarPaciente.setModal(true);

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar por:"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtValorFiltro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtValorFiltro.setForeground(new java.awt.Color(0, 0, 255));
        txtValorFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorFiltroKeyTyped(evt);
            }
        });
        jPanel2.add(txtValorFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(181, 18, 290, 30));

        tablaPacientes.setBackground(new java.awt.Color(255, 255, 204));
        tablaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaPacientes);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 500, 190));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Nombre del Paciente:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 18, 180, 30));

        javax.swing.GroupLayout frmBuscarPacienteLayout = new javax.swing.GroupLayout(frmBuscarPaciente.getContentPane());
        frmBuscarPaciente.getContentPane().setLayout(frmBuscarPacienteLayout);
        frmBuscarPacienteLayout.setHorizontalGroup(
            frmBuscarPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmBuscarPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
        frmBuscarPacienteLayout.setVerticalGroup(
            frmBuscarPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmBuscarPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        setBackground(java.awt.SystemColor.activeCaption);
        setClosable(true);
        setIconifiable(true);
        setTitle("CITAS");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jXTaskPaneContainer1.setBackground(java.awt.SystemColor.activeCaption);

        jXTaskPane1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Cita.png"))); // NOI18N
        jXTaskPane1.setTitle("OPCIONES");
        jXTaskPane1.setPreferredSize(new java.awt.Dimension(151, 135));

        lblNuevaCita.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNuevaCita.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNuevaCita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_AddDataBase.png"))); // NOI18N
        lblNuevaCita.setText("Nueva Cita");
        lblNuevaCita.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblNuevaCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNuevaCitaMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblNuevaCita);

        lblGuardarCambios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblGuardarCambios.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblGuardarCambios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_save.png"))); // NOI18N
        lblGuardarCambios.setText("Guardar Cambios");
        lblGuardarCambios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblGuardarCambios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGuardarCambiosMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblGuardarCambios);

        lblCancelarCambios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCancelarCambios.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCancelarCambios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_refresh.png"))); // NOI18N
        lblCancelarCambios.setText("Cancelar Cambios");
        lblCancelarCambios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblCancelarCambios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCancelarCambiosMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblCancelarCambios);

        jXTaskPaneContainer1.add(jXTaskPane1);

        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });
        jXTaskPaneContainer1.add(txtFecha);
        jXTaskPaneContainer1.add(txtHoraSistema);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBackground(java.awt.SystemColor.activeCaption);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Datos Paciente"));
        jPanel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("IdPaciente:");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 18, -1, -1));

        txtIdPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtIdPaciente.setForeground(new java.awt.Color(255, 0, 0));
        jPanel4.add(txtIdPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 18, 130, 25));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Nombre:");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));
        jPanel4.add(txtNombrePaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 43, 450, 25));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Dirección:");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 62, -1, -1));

        txtDireccion.setColumns(20);
        txtDireccion.setLineWrap(true);
        txtDireccion.setRows(3);
        txtDireccion.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtDireccion);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 68, 450, 50));

        btnBuscarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_search.png"))); // NOI18N
        btnBuscarPaciente.setToolTipText("Buscar Paciente");
        btnBuscarPaciente.setEnabled(false);
        btnBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPacienteActionPerformed(evt);
            }
        });
        jPanel4.add(btnBuscarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 18, 25, 25));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Teléfono:");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 118, -1, -1));
        jPanel4.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 118, 140, 25));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Email:");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 118, 50, -1));
        jPanel4.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 118, 240, 25));

        jPanel5.setBackground(java.awt.SystemColor.activeCaption);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Datos Cita"));
        jPanel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Cita Nº:");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, -1));

        lblNumeroCita.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblNumeroCita.setForeground(new java.awt.Color(255, 0, 51));
        lblNumeroCita.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel5.add(lblNumeroCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 20, 150, 25));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Fecha de la Cita:");
        jPanel5.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 53, -1, -1));

        jdFechaCita.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jdFechaCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jdFechaCitaMouseClicked(evt);
            }
        });
        jPanel5.add(jdFechaCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 50, 140, 30));

        grupoHorario.add(optH1);
        optH1.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH1.setText("8:00 - 8:30");
        optH1.setBorderPainted(true);
        optH1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 125, 30));

        grupoHorario.add(optH2);
        optH2.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH2.setText("8:30 - 9:00");
        optH2.setBorderPainted(true);
        optH2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 125, 30));

        grupoHorario.add(optH3);
        optH3.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH3.setText("9:00 - 9:30");
        optH3.setBorderPainted(true);
        optH3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 125, 30));

        grupoHorario.add(optH4);
        optH4.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH4.setText("9:30 - 10:00");
        optH4.setBorderPainted(true);
        optH4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 125, 30));

        grupoHorario.add(optH5);
        optH5.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH5.setText("10:00 - 10:30");
        optH5.setBorderPainted(true);
        optH5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 125, 30));

        grupoHorario.add(optH6);
        optH6.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH6.setText("10:30 - 11:00");
        optH6.setBorderPainted(true);
        optH6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH6, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 125, 30));

        grupoHorario.add(optH7);
        optH7.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH7.setText("11:00 - 11:30");
        optH7.setBorderPainted(true);
        optH7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 125, 30));

        grupoHorario.add(optH8);
        optH8.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH8.setText("11:30 - 12:00");
        optH8.setBorderPainted(true);
        optH8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 125, 30));

        grupoHorario.add(optH10);
        optH10.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH10.setText("13:30 - 14:00");
        optH10.setBorderPainted(true);
        optH10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        optH10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optH10ActionPerformed(evt);
            }
        });
        jPanel5.add(optH10, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, 125, 30));

        grupoHorario.add(optH9);
        optH9.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH9.setText("13:00 - 13:30");
        optH9.setBorderPainted(true);
        optH9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 125, 30));

        grupoHorario.add(optH11);
        optH11.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH11.setText("14:00 - 14:30");
        optH11.setBorderPainted(true);
        optH11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH11, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 125, 30));

        grupoHorario.add(optH12);
        optH12.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH12.setText("14:30 - 15:00");
        optH12.setBorderPainted(true);
        optH12.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH12, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 180, 125, 30));

        grupoHorario.add(optH13);
        optH13.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH13.setText("15:00 - 15:30");
        optH13.setBorderPainted(true);
        optH13.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH13, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, 125, 30));

        grupoHorario.add(optH14);
        optH14.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH14.setText("15:30 - 16:00");
        optH14.setBorderPainted(true);
        optH14.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        optH14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optH14ActionPerformed(evt);
            }
        });
        jPanel5.add(optH14, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 210, 125, 30));

        grupoHorario.add(optH15);
        optH15.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH15.setText("16:00 - 16:30");
        optH15.setBorderPainted(true);
        optH15.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH15, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 125, 30));

        grupoHorario.add(optH16);
        optH16.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        optH16.setText("16:30 - 17:00");
        optH16.setBorderPainted(true);
        optH16.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.add(optH16, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 240, 125, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("HORARIOS DISPONIBLES");
        jPanel5.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 85, 210, 30));

        btnVerHorarioDisponible.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnVerHorarioDisponible.setText("Ver Horario Disponible");
        btnVerHorarioDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHorarioDisponibleActionPerformed(evt);
            }
        });
        jPanel5.add(btnVerHorarioDisponible, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 200, 30));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("MATUTINO");
        jPanel5.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 240, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("VERSPERTINO");
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 220, -1));

        javax.swing.GroupLayout panelCitasLayout = new javax.swing.GroupLayout(panelCitas);
        panelCitas.setLayout(panelCitasLayout);
        panelCitasLayout.setHorizontalGroup(
            panelCitasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCitasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCitasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelCitasLayout.setVerticalGroup(
            panelCitasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCitasLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("RESERVAR CITA", panelCitas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPacienteActionPerformed
        // TODO add your handling code here:
        frmBuscarPaciente.setVisible(true);
    }//GEN-LAST:event_btnBuscarPacienteActionPerformed

    private void lblNuevaCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNuevaCitaMouseClicked
        // TODO add your handling code here:
        nuevaCita();//procedimiento
        activaOpciones (false, true, true);//procedimiento
        activaControles (false, false, false, false, true, true);//procedimiento
    }//GEN-LAST:event_lblNuevaCitaMouseClicked

    private void lblGuardarCambiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGuardarCambiosMouseClicked
        // TODO add your handling code here:
        validarCampos();//procedimiento
        limpiarObjetos();//procedimiento
        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false);
        nuevaCita();//procedimiento                
    }//GEN-LAST:event_lblGuardarCambiosMouseClicked

    private void lblCancelarCambiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancelarCambiosMouseClicked
        // TODO add your handling code here:
        limpiarObjetos();//procedimiento
        activaOpciones (true, false, false);//procedimiento
        activaControles (false, false, false, false, false, false);//procedimiento
        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false);
        limpiarObjetos();
    }//GEN-LAST:event_lblCancelarCambiosMouseClicked

    private void tablaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPacientesMouseClicked
        // TODO add your handling code here:
        // MUESTRA CADA REGISTRO SELECCIONADO EN LOS CAMPOS CORRESPONDIENTES DEL FORMULARIO
        fila= tablaPacientes.rowAtPoint(evt.getPoint());//obtiene el indice de la fila seleccionada

        if (fila>-1){

            /*colocamos en los campos del formulario, el valor correspondiente obtenido
             * de la posicion de la fila y de la posicion de la columna. 
            */
            txtIdPaciente.setText(String.valueOf(tablaPacientes.getValueAt(fila, 0)));
            txtNombrePaciente.setText(String.valueOf(tablaPacientes.getValueAt(fila, 1)));
            txtDireccion.setText(String.valueOf(tablaPacientes.getValueAt(fila, 2)));
            txtTelefono.setText(String.valueOf(tablaPacientes.getValueAt(fila, 3)));
            txtEmail.setText(String.valueOf(tablaPacientes.getValueAt(fila, 4)));
            
            frmBuscarPaciente.dispose();            
            activaControles (false, false, false, false, true, true);
            activaOpciones (false, true, true);
        }
    }//GEN-LAST:event_tablaPacientesMouseClicked

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        updateTabla();
        nuevaCita();
        limpiarObjetos();
        obtenerFechaActual();
        activaOpciones (true, false, false);
        activaControles (false, false, false, false, false, false);
        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false);
        ocultaControles();
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnVerHorarioDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHorarioDisponibleActionPerformed
        // TODO add your handling code here:
        if (jdFechaCita.getDate()==null)
        {
            JOptionPane.showMessageDialog(null,"Elija la fecha de la cita primero");
        }else
        {
            
            validarFechaCita();//procedimiento para mostrar las horas disponibles segun la fecha elegida
        }
        
    }//GEN-LAST:event_btnVerHorarioDisponibleActionPerformed

    private void jdFechaCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jdFechaCitaMouseClicked
        // TODO add your handling code here:
        grupoHorario.clearSelection();
    }//GEN-LAST:event_jdFechaCitaMouseClicked

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    private void txtValorFiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorFiltroKeyTyped
        String vBuscar="nombres";
        String vValor = txtValorFiltro.getText();
        try {
            //p.buscarPaciente(vBuscar, vValor);           
            tablaPacientes.setModel( p.buscarPaciente3(vBuscar, vValor));
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
            Logger.getLogger(frmPaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtValorFiltroKeyTyped

    private void optH10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optH10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optH10ActionPerformed

    private void optH14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optH14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optH14ActionPerformed

    //METODO PARA ACTUALIZAR LOS REGISTROS DE LA TABLA
    private void updateTabla(){
       String[] columNames = {"IdPaciente", "Nombre", "Dirección", "Teléfono","Email"};
     //usamos la funcion
    dtCitas = c.getDatosPacientes();

    // se colocan los datos en la tabla
    DefaultTableModel datos= new DefaultTableModel(dtCitas,columNames);
    tablaPacientes.setModel(datos);
    }
    
    //METODO PARA GENERAR NUEVO CITA
    public void nuevaCita()
    {
              
       limpiarObjetos();
       activaOpciones (false,true,true);
       btnBuscarPaciente.setEnabled(true);

       //GENERAR NUMERO DE CITA AUTOMANTICO
       int registros=0;
       try
        {
            con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT count(1) as total FROM citas");//cuenta el total de registros de la tabla citas
            ResultSet res=pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();

            if (registros <=0)//significa que la tabla no tiene ningun registro
            {
                lblNumeroCita.setText("000001");
            }
            else
            {                                  
//                con = new bdConexion();
                PreparedStatement pstm1=(PreparedStatement)
                con.getConnection().prepareStatement("SELECT MAX(IdCita) as codigo FROM citas");
                ResultSet res1=pstm1.executeQuery();


                res1.first();
                //int cod=Integer.valueOf(res1.getString("codigo"));
                String v =res1.getString("codigo");               
                int cod=(Integer.parseInt(v)) + 1;                                

                if ( cod<10)
                {
                    lblNumeroCita.setText("00000"+cod);
                }
                else if(cod<100)
                {
                    lblNumeroCita.setText("0000"+cod);
                }
                else if(cod<1000)
                {
                    lblNumeroCita.setText("000"+cod);
                }
                else if(cod<10000)
                {
                    lblNumeroCita.setText("00"+cod);
                }
                else if(cod<100000)
                {
                    lblNumeroCita.setText("0"+cod);
                }
                else
                {
                    lblNumeroCita.setText(v);
                }                
            res1.close();
            }
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }       
    }
    
    //METODO GUARDAR CITA
    public void guardarCita()
    {        
        int resp;
        resp=JOptionPane.showConfirmDialog(null,"¿Desea guardar el registro?","Pregunta",0);

        if (resp==0)
        {
            String cCita = lblNumeroCita.getText();
            String cPac = txtIdPaciente.getText();                        
            String hCita = null;
            String eCita = "1";
            
            //para obtener la fecha del control jdatechooser            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = jdFechaCita.getDate();
            String fecCita= sdf.format(date);
            
            //para obtener la hora que el usuario seleccionó del grupo de opciones
            if(optH1.isSelected())
            {
                hCita="8:00 - 8:30 a.m.";
            }
            else if(optH2.isSelected())
            {
                hCita="8:30 - 9:00 a.m.";
            }
            else if(optH3.isSelected())
            {
                hCita="9:00 - 9:30 a.m.";
            }
            else if(optH4.isSelected())
            {
                hCita="9:30 - 10:00 a.m.";
            }
            else if(optH5.isSelected())
            {
                hCita="10:00 - 10:30 a.m.";
            }
            else if(optH6.isSelected())
            {
                hCita="10:30 - 11:00 a.m.";
            }
            else if(optH7.isSelected())
            {
                hCita="11:00 - 11:30 a.m.";
            }
            else if(optH8.isSelected())
            {
                hCita="11:30 - 11:59 a.m.";
            }
             else if(optH9.isSelected())
            {
                hCita="13:00 - 13:30 p.m.";
            }
            else if(optH10.isSelected())
            {
                hCita="13:30 - 14:00 p.m.";
            }
            else if(optH11.isSelected())
            {
                hCita="14:00 - 14:30 p.m.";
            }
            else if(optH12.isSelected())
            {
                hCita="14:30 - 15:00 p.m.";
            }
            else if(optH13.isSelected())
            {
                hCita="15:00 - 15:30 p.m.";
            }
            else if(optH14.isSelected())
            {
                hCita="15:30 - 16:00 p.m.";
            }
            else if(optH15.isSelected())
            {
                hCita="16:00 - 16:30 p.m.";
            }
            else if(optH16.isSelected())
            {
                hCita="16:30 - 17:00 p.m.";
            }
            
            
            
            c.nuevaCita(cCita, cPac, fecCita, hCita, eCita);
            updateTabla();

            activaOpciones(true,false,false);
            activaControles (false, false, false, false, false, false);                               
        }
    }
    
    //METODO PARA ACTIVAR O BLOQUEAR LOS CONTROLES USADOS EN EL FORMULARIO
    public void activaControles(boolean np, boolean dp, boolean tp, boolean ep, boolean fc, boolean bt)
    {
        txtNombrePaciente.setEditable(np);
        txtDireccion.setEditable(dp);
        txtTelefono.setEditable(tp);
        txtEmail.setEditable(ep);
        jdFechaCita.setEnabled(fc);
        btnVerHorarioDisponible.setEnabled(bt);              
    }
    
    //METODO PARA ACTIVAR O DESACTIVAR LAS OPCIONES DE CONTROL DEL FORMULARIO
    public void activaOpciones(boolean n, boolean g, boolean c)
    {
        lblNuevaCita.setEnabled(n);
        lblGuardarCambios.setEnabled(g);
        lblCancelarCambios.setEnabled(c);
    }
    
    //METODO PARA LIMPIAR LOS OBJETOS
    public void limpiarObjetos()
    {
        txtIdPaciente.setText("");
        txtNombrePaciente.setText("");
        txtDireccion.setText("");
        txtTelefono.setText("");        
        txtEmail.setText("");
        jdFechaCita.setDate(null);
        
        grupoHorario.clearSelection();
    }        
    
    //METODO PARA ACTIVAR/BLOQUEAR LOS BOTONES DE HORARIO
    public void activaOpcionesHorario(boolean h1, boolean h2, boolean h3, boolean h4, boolean h5, boolean h6, boolean h7, boolean h8, boolean h9, boolean h10, boolean h11, boolean h12, boolean h13, boolean h14, boolean h15, boolean h16)
    {
        //activar o descativar las opciones de horario
        optH1.setEnabled(h1);
        optH2.setEnabled(h2);
        optH3.setEnabled(h3);
        optH4.setEnabled(h4);
        optH5.setEnabled(h5);
        optH6.setEnabled(h6);
        optH7.setEnabled(h7);
        optH8.setEnabled(h8);
        optH9.setEnabled(h9);
        optH10.setEnabled(h10);
        optH11.setEnabled(h11);
        optH12.setEnabled(h12);
        optH13.setEnabled(h13);
        optH14.setEnabled(h14);
        optH15.setEnabled(h15);
        optH16.setEnabled(h16);
    }
        
    //METODO PARA VALIDAR LOS CAMPOS DE TEXTO CUANDO ES UN REGISTRO NUEVO O MODIFICACION
    public void validarCampos()
    {
        // VALIDACION DE LOS CAMPOS DE TEXTO        
        if (txtIdPaciente.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Por favor, especifique los datos del Paciente");
            //frmBuscarPaciente.setVisible(true);
        }

        else if (jdFechaCita.getDate()==null)
        {
            JOptionPane.showMessageDialog(null,"Por favor, Seleccione la fecha de la consulta");
            jdFechaCita.requestFocus();
        
        }else
        {
            //SI TODOS LOS CAMPOS ESTAN CORRECTOS, LLAMAMOS AL METODO GUARDAR CITA
            guardarCita();
        }        
    }
    
    //METODO PARA VALIDAR LA FECHA DE LA CITA
    private void validarFechaCita()
    {                            
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");        
       
        //Obtener la fecha actual del sistema
        Date fechaActual = new Date(); 
        String fechaActualCadena = sdf. format(fechaActual);        
        
        //Obtener la fecha que selecciono el usuario del control del formulario
        java.util.Date date = jdFechaCita.getDate();
        String fechaSeleccionada= sdf.format(date);
        
        /*Validar que la fecha seleccionada sea válida*/
        if(fechaSeleccionada.compareTo(fechaActualCadena)<0) //Si es menor a cero, la fechaSeleccionada ya esta vencida
        {
            JOptionPane.showMessageDialog(null,"Error, Seleccione una fecha válida para la nueva cita");
            JOptionPane.showMessageDialog(null, "Fecha Actual: "+sdf.format(fechaActual)+" Fecha Seleccionada: "+fechaSeleccionada);
            //desactivamos los botones de horarios
            activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false);

        }else if(fechaSeleccionada.compareTo(fechaActualCadena)>0)
        {
            /*//Al ser mayor la fecha seleccionada a la actual, podemos mostrar los horarios diponibles para esa fecha
            asumiendo que puedan existir horarios ya reservados*/
            validarHoraCita();
        }else
        {
            /*Si la fecha seleccionada es la del mismo dia, mostraremos las horas que estén disponibles
            a partir de la hora actual del dia
             */
            validarHoraCita2();
        }
        
    }
    
    //metodo para validar la hora de la cita
    public void validarHoraCita()
    {        

        /*Obtenemos la fecha de la cita que el usuario seleccionó*/
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date date = jdFechaCita.getDate();
        String fecC= sdf.format(date);
        
        //realizar consulta a la bd para averiguar cuales horarios ya estan asignados segun la fecha seleccionada
       int registros=0;
       try
        {
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT count(1) as total FROM citas WHERE fecha='"+fecC+"' AND estado=1");//cuenta cuantos registros existen con esta fecha
            ResultSet res=pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();

            if (registros <=0)//significa que no existen registros con la fecha asignada
            {
                //habilitamos todos los horarios ya que para esta fecha ninguno ha sido asignado aun
                activaOpcionesHorario(true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
            }
            else //Ya existen citas reservadas para esa fecha, debemos obtener los horarios disponibles
            {    
                con = new bdConexion();            
                PreparedStatement pstm1=(PreparedStatement)
                con.getConnection().prepareStatement("SELECT hora FROM citas WHERE fecha='"+fecC+"' AND estado=1");
                ResultSet res1=pstm1.executeQuery();
                
                /*Habilitamos todos los horarios*/
                activaOpcionesHorario(true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
                
                //validamos si el horario ya está asignado, si es así lo inactivamos
                 while (res1.next())
                {
                                 
                    if ("8:00 - 8:30 a.m.".equals(res1.getString("hora")))
                    {
                        optH1.setEnabled(false);
                    } 
                    else if ("8:30 - 9:00 a.m.".equals(res1.getString("hora")))
                    {
                        optH2.setEnabled(false);                        
                    }
                    else if ("9:00 - 9:30 a.m.".equals(res1.getString("hora")))
                    {
                        optH3.setEnabled(false);
                        optH1.setForeground(Color.red);
                    }
                    else if ("9:30 - 10:00 a.m.".equals(res1.getString("hora")))
                    {
                        optH4.setEnabled(false);
                    }
                    else if ("10:00 - 10:30".equals(res1.getString("hora")))
                    {
                        optH5.setEnabled(false);
                    }
                    else if ("10:30 - 11:00 a.m.".equals(res1.getString("hora")))
                    {
                        optH6.setEnabled(false);
                    }
                    else if ("11:00 - 11:30 a.m.".equals(res1.getString("hora")))
                    {
                        optH7.setEnabled(false);
                    }
                    else if ("11:30 - 11:59 a.m.".equals(res1.getString("hora")))
                    {
                        optH8.setEnabled(false);
                    }
                    else if ("13:00 - 13:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH9.setEnabled(false);
                    }
                    else if ("13:30 - 14:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH10.setEnabled(false);
                    }
                    else if ("14:00 - 14:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH11.setEnabled(false);
                    }
                    else if ("14:30 - 15:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH12.setEnabled(false);
                    }
                    else if ("15:00 - 15:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH13.setEnabled(false);
                    }
                    else if ("15:30 - 16:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH14.setEnabled(false);
                    }
                    else if ("16:00 - 16:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH15.setEnabled(false);
                    }
                    else
                    {
                        optH16.setEnabled(false);
                    }
                }               
               
            res1.close();
            }
            
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }
    
    //METODO PARA OBTENER LA HORA Y LA FECHA ACTUAL
    private void obtenerFechaActual()
    {
         Calendar c = Calendar.getInstance();//creamos una instancia de la clase calendar de java
        //java.util.Date fecha = new Date();
        String dia = Integer.toString(c.get(Calendar.DATE));
        String mes = Integer.toString(c.get(Calendar.MONTH)+1);
        String annio = Integer.toString(c.get(Calendar.YEAR));
        
        String hora = Integer.toString(c.get(Calendar.HOUR_OF_DAY));
        String minuto = Integer.toString(c.get(Calendar.MINUTE));
        String segundo = Integer.toString(c.get(Calendar.SECOND));        
        String ampm = c.get(Calendar.AM_PM)==Calendar.AM?"a.m.":"p.m.";
        
        int d = Integer.parseInt(dia);
        int m = Integer.parseInt(mes);
        
        if (d < 10 && m < 10)
        {
            txtFecha.setText(annio +"0"+ mes +"0"+dia);      
            
        }else if(d>10 && m <10)
        {
            txtFecha.setText(annio +"0"+ mes +""+dia);
            
        }else
        {
            txtFecha.setText(annio +""+ mes +""+dia);
            
        }
        
        int h = Integer.parseInt(hora);
        int mi = Integer.parseInt(minuto);
        
        
        if(h<10 && mi<10)
        {
            txtHoraSistema.setText("0"+hora+":0"+minuto);            
        }else if (h<10 && mi >10)
        {
            txtHoraSistema.setText("0"+hora+':'+minuto);            
        }else if(h>10 && mi<10)                
        {
            txtHoraSistema.setText(hora+":0"+minuto);            
        }else
        {
            txtHoraSistema.setText(hora+":"+minuto);            
        }
    }
    
    //METODO PARA VALIDAR LA HORA DE LA CITA SI ES PARA LA FECHA ACTUAL
    public void validarHoraCita2()
    {        
        //para obtener la fecha
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");        
        java.util.Date date = jdFechaCita.getDate();        
        String fecC= sdf.format(date);
        
        //lista de horas de trabajo        
            String h1="08:30";
        String h2="09:00";
        String h3="09:30";
        String h4="10:00";
        String h5="10:30";
        String h6="11:00";
        String h7="11:30";
        String h8="11:59";
        String h9="13:30";
        String h10="14:00";
        String h11="14:30";
        String h12="15:00";
        String h13="15:30";
        String h14="16:00";
        String h15="16:30";
        String h16="17:00";
        
        //realizar consulta a la bd para averiguar cuales horarios ya estan asignados segun la fecha seleccionada
       int registros=0;
       try
        {
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT count(1) as total FROM citas WHERE fecha ='"+fecC+"' AND estado=1");//cuenta cuantos registros hay con esta fecha
            ResultSet res=pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();
            
            if (registros >0)//significa que hay registros con esta fecha
            {
                //tendria que deshabilitar todas las horas que son menores a la hora actual
                String hAc=txtHoraSistema.getText();
                System.out.println("Hora Actual segun el sistema: "+hAc);
                try
                {
                         DateFormat dateFormat = new SimpleDateFormat("HH:mm");
                    Date horaS, hora1, hora2, hora3,hora4,hora5,hora6,hora7,hora8,hora9,hora10,hora11,hora12,hora13,hora14,hora15,hora16;
                    horaS= dateFormat.parse(hAc);
                    hora1=dateFormat.parse(h1);
                    hora2=dateFormat.parse(h2);
                    hora3=dateFormat.parse(h3);
                    hora4=dateFormat.parse(h4);
                    hora5=dateFormat.parse(h5);
                    hora6=dateFormat.parse(h6);
                    hora7=dateFormat.parse(h7);
                    hora8=dateFormat.parse(h8);
                    hora9=dateFormat.parse(h9);
                    hora10=dateFormat.parse(h10);
                    hora11=dateFormat.parse(h11);
                    hora12=dateFormat.parse(h12);
                    hora13=dateFormat.parse(h13);
                    hora14=dateFormat.parse(h14);
                    hora15=dateFormat.parse(h15);
                    hora16=dateFormat.parse(h16);
              if (horaS.compareTo(hora1)>=0)
                    {
                        activaOpcionesHorario(false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora2)>=0)
                    {
                        activaOpcionesHorario(false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora3)>0)
                    {                      
                        activaOpcionesHorario(false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora4)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora5)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora6)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora7)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora8)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora9)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora10)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora11)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora12)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true);
                    }
                    if (horaS.compareTo(hora13)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true);
                    }
                    if (horaS.compareTo(hora14)>=0)
                        {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true);
                    }
                    if (horaS.compareTo(hora15)>=0)
                        {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true);
                    }
                    if (horaS.compareTo(hora16)>=0)
                    {                      
                        JOptionPane.showMessageDialog(null,"Para este dia ya no hay hora dispobible");
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false);
                    }
                    
                    
                }  catch(ParseException parseException)
                {
                    parseException.printStackTrace();
                }
                
            }
            else
            {
                //tendria que deshabilitar todas las horas que son menores a la hora actual
                String hAc=txtHoraSistema.getText();
                
                try
                {
                         DateFormat dateFormat = new SimpleDateFormat("HH:mm");
                    Date horaS, hora1, hora2, hora3,hora4,hora5,hora6,hora7,hora8,hora9,hora10,hora11,hora12,hora13,hora14,hora15,hora16;
                    horaS= dateFormat.parse(hAc);
                    hora1=dateFormat.parse(h1);
                    hora2=dateFormat.parse(h2);
                    hora3=dateFormat.parse(h3);
                    hora4=dateFormat.parse(h4);
                    hora5=dateFormat.parse(h5);
                    hora6=dateFormat.parse(h6);
                    hora7=dateFormat.parse(h7);
                    hora8=dateFormat.parse(h8);
                    hora9=dateFormat.parse(h9);
                    hora10=dateFormat.parse(h10);
                    hora11=dateFormat.parse(h11);
                    hora12=dateFormat.parse(h12);
                    hora13=dateFormat.parse(h13);
                    hora14=dateFormat.parse(h14);
                    hora15=dateFormat.parse(h15);
                    hora16=dateFormat.parse(h16);
                    
                              if (horaS.compareTo(hora1)>=0)
                    {
                        activaOpcionesHorario(false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora2)>=0)
                    {
                        activaOpcionesHorario(false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora3)>0)
                    {                      
                        activaOpcionesHorario(false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora4)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora5)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora6)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora7)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora8)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora9)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora10)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora11)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true);
                    }
                    if (horaS.compareTo(hora12)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true);
                    }
                    if (horaS.compareTo(hora13)>=0)
                    {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true);
                    }
                    if (horaS.compareTo(hora14)>=0)
                        {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true);
                    }
                    if (horaS.compareTo(hora15)>=0)
                        {                      
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true);
                    }
                    if (horaS.compareTo(hora16)>=0)
                    {                      
                        JOptionPane.showMessageDialog(null,"Para este dia ya no hay hora dispobible");
                        activaOpcionesHorario(false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false);
                    }
                    
                    
                }  catch(ParseException parseException)
                {
                    parseException.printStackTrace();
                }
            }
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
       
       try
       {
                con = new bdConexion();            
                PreparedStatement pstm1=(PreparedStatement)
                con.getConnection().prepareStatement("SELECT hora FROM citas WHERE fecha='"+fecC+"' AND estado=1");
                ResultSet res1=pstm1.executeQuery();
                                
           //BUCLE PARA BLOQUEAR LAS HORAS YA ASIGNADAS
                while (res1.next())
                {
                                 
                    if ("8:00 - 8:30 a.m.".equals(res1.getString("hora")))
                    {
                        optH1.setEnabled(false);                        
                    } 
                    else if ("8:30 - 9:00 a.m.".equals(res1.getString("hora")))
                    {
                        optH2.setEnabled(false);                        
                    }
                    else if ("9:00 - 9:30 a.m.".equals(res1.getString("hora")))
                    {
                        optH3.setEnabled(false);                        
                    }
                    else if ("9:30 - 10:00 a.m.".equals(res1.getString("hora")))
                    {
                        optH4.setEnabled(false);
                    }
                    else if ("10:00 - 10:30".equals(res1.getString("hora")))
                    {
                        optH5.setEnabled(false);
                    }
                    else if ("10:30 - 11:00 a.m.".equals(res1.getString("hora")))
                    {
                        optH6.setEnabled(false);
                    }
                    else if ("11:00 - 11:30 a.m.".equals(res1.getString("hora")))
                    {
                        optH7.setEnabled(false);
                    }
                    else if ("11:30 - 11:59 a.m.".equals(res1.getString("hora")))
                    {
                        optH8.setEnabled(false);
                    }
                    else if ("13:00 - 13:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH9.setEnabled(false);
                    }
                    else if ("13:30 - 14:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH10.setEnabled(false);
                    }
                    else if ("14:00 - 14:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH11.setEnabled(false);
                    }
                    else if ("14:30 - 15:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH12.setEnabled(false);
                    }
                    else if ("15:00 - 15:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH13.setEnabled(false);
                    }
                    else if ("15:30 - 16:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH14.setEnabled(false);
                    }
                    else if ("16:00 - 16:30 p.m.".equals(res1.getString("hora")))
                    {
                        optH15.setEnabled(false);
                    }
                    else if ("16:30 - 17:00 p.m.".equals(res1.getString("hora")))
                    {
                        optH16.setEnabled(false);
                    }
                }             
               
            res1.close();
       }
       catch(SQLException e)
        {
            System.out.println(e);
        }              
    }
            
    //oculta los controles adicionales que se utilizan en el formulario
    private void ocultaControles()
    {
        txtFecha.setVisible(false);
        txtHoraSistema.setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPaciente;
    private javax.swing.JButton btnVerHorarioDisponible;
    private javax.swing.JDialog frmBuscarPaciente;
    private javax.swing.ButtonGroup grupoHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    private com.toedter.calendar.JDateChooser jdFechaCita;
    private javax.swing.JLabel lblCancelarCambios;
    private javax.swing.JLabel lblGuardarCambios;
    private javax.swing.JLabel lblNuevaCita;
    private javax.swing.JLabel lblNumeroCita;
    private javax.swing.JRadioButton optH1;
    private javax.swing.JRadioButton optH10;
    private javax.swing.JRadioButton optH11;
    private javax.swing.JRadioButton optH12;
    private javax.swing.JRadioButton optH13;
    private javax.swing.JRadioButton optH14;
    private javax.swing.JRadioButton optH15;
    private javax.swing.JRadioButton optH16;
    private javax.swing.JRadioButton optH2;
    private javax.swing.JRadioButton optH3;
    private javax.swing.JRadioButton optH4;
    private javax.swing.JRadioButton optH5;
    private javax.swing.JRadioButton optH6;
    private javax.swing.JRadioButton optH7;
    private javax.swing.JRadioButton optH8;
    private javax.swing.JRadioButton optH9;
    private javax.swing.JPanel panelCitas;
    private javax.swing.JTable tablaPacientes;
    private javax.swing.JTextArea txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHoraSistema;
    private javax.swing.JTextField txtIdPaciente;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtValorFiltro;
    // End of variables declaration//GEN-END:variables
}
