package formularios;

import clases.bdConexion;
import clases.gestionCitas;
import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author laptop-1
 */
public class frmGestionCitas extends javax.swing.JInternalFrame {

    bdConexion con;
    gestionCitas gC = new gestionCitas();
    Object[][] dtCitasVigentes; //variable de tipo Object que almacena una matriz de datos
    Object[][] dtCitasAnuladas;
    Object[][] dtCitasVencidas;
    int fila = -1;

    public frmGestionCitas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    //METODO PARA ACTUALIZAR LOS REGISTROS DE LA TABLA CITAS VIGENTES
    private void updateTablaCitasVigentes() {
        String[] columNames = {"Id Cita", "Id Paciente", "Fecha Cita", "Hora Cita"};
        //usamos la funcion    
        dtCitasVigentes = gC.getDatos1();

        // se colocan los datos en la tabla
        DefaultTableModel datos = new DefaultTableModel(dtCitasVigentes, columNames);
        tablaCitasVigentes.setModel(datos);
    }

    //METODO PARA ACTUALIZAR LOS REGISTROS DE LA TABLA CITAS ANULADAS
    private void updateTablaCitasAnuladas() {
        String[] columNames = {"Id Cita", "Id Paciente", "Fecha Cita", "Hora Cita"};
        //usamos la funcion    
        dtCitasAnuladas = gC.getDatos2();

        // se colocan los datos en la tabla
        DefaultTableModel datos = new DefaultTableModel(dtCitasAnuladas, columNames);
        tablaCitasAnuladas.setModel(datos);
    }

    //METODO PARA ACTUALIZAR LOS REGISTROS DE LA TABLA CITAS VENCIDAS
    private void updateTablaCitasVencidas() {
        String[] columNames = {"Id Cita", "Id Paciente", "Fecha Cita", "Hora Cita"};
        //usamos la funcion    
        dtCitasVencidas = gC.getDatos3();

        // se colocan los datos en la tabla
        DefaultTableModel datos = new DefaultTableModel(dtCitasVencidas, columNames);
        tablaCitasVencidas.setModel(datos);
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmReprogramarCita = new javax.swing.JDialog();
        jPanel7 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jdFechaCita = new com.toedter.calendar.JDateChooser();
        jLabel33 = new javax.swing.JLabel();
        btnVerHorarioDisponible = new javax.swing.JButton();
        txtFecha = new javax.swing.JTextField();
        txtHoraSistema = new javax.swing.JTextField();
        jcListaHoras = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        jpanelHorarios = new javax.swing.JPanel();
        optH1 = new javax.swing.JRadioButton();
        optH5 = new javax.swing.JRadioButton();
        optH6 = new javax.swing.JRadioButton();
        optH2 = new javax.swing.JRadioButton();
        optH3 = new javax.swing.JRadioButton();
        optH7 = new javax.swing.JRadioButton();
        optH8 = new javax.swing.JRadioButton();
        optH4 = new javax.swing.JRadioButton();
        optH9 = new javax.swing.JRadioButton();
        optH13 = new javax.swing.JRadioButton();
        optH10 = new javax.swing.JRadioButton();
        optH14 = new javax.swing.JRadioButton();
        jLabel36 = new javax.swing.JLabel();
        optH11 = new javax.swing.JRadioButton();
        optH15 = new javax.swing.JRadioButton();
        optH16 = new javax.swing.JRadioButton();
        optH12 = new javax.swing.JRadioButton();
        btnGuardarCambios = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        lblNumeroCita = new javax.swing.JLabel();
        grupoHorario = new javax.swing.ButtonGroup();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        lblCancelar = new javax.swing.JLabel();
        lblReprogramar = new javax.swing.JLabel();
        lblEliminar = new javax.swing.JLabel();
        lblCerrar = new javax.swing.JLabel();
        panelFichas = new javax.swing.JTabbedPane();
        panelCitasVigentes = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCitasVigentes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNumeroCita = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHoraCita = new javax.swing.JTextField();
        txtFechaCita = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtIdPaciente = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDireccion = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        txtRegion = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtCiudad = new javax.swing.JTextField();
        jcHorariosVencidos = new javax.swing.JComboBox();
        txtFecSistema = new javax.swing.JTextField();
        txthSistema = new javax.swing.JTextField();
        jcIC = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCitasAnuladas = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNumeroCita1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtHoraCita1 = new javax.swing.JTextField();
        txtFechaCita1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtIdPaciente1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtNombre1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtDireccion1 = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        txtEmail1 = new javax.swing.JTextField();
        txtTelefono1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtRegion1 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtCiudad1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaCitasVencidas = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtNumeroCita2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtHoraCita2 = new javax.swing.JTextField();
        txtFechaCita2 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtIdPaciente2 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtNombre2 = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtDireccion2 = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        txtEmail2 = new javax.swing.JTextField();
        txtTelefono2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtRegion2 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtCiudad2 = new javax.swing.JTextField();

        frmReprogramarCita.setTitle("Reprogramar Citas");
        frmReprogramarCita.setBounds(new java.awt.Rectangle(200, 200, 477, 345));
        frmReprogramarCita.setModal(true);
        frmReprogramarCita.setResizable(false);
        frmReprogramarCita.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                frmReprogramarCitaWindowActivated(evt);
            }
        });

        jPanel7.setBackground(java.awt.SystemColor.activeCaption);
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Informaci√≥n Nueva Cita", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel32.setText("Fecha de la Nueva Cita:");
        jPanel7.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 60, -1, 30));

        jdFechaCita.setForeground(new java.awt.Color(255, 0, 0));
        jdFechaCita.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jdFechaCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jdFechaCitaMouseClicked(evt);
            }
        });
        jPanel7.add(jdFechaCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 170, 30));

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 0, 0));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("JORNADA VESPERTINA");
        jPanel7.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 230, 430, 25));

        btnVerHorarioDisponible.setText("Ver Horario Disponible");
        btnVerHorarioDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHorarioDisponibleActionPerformed(evt);
            }
        });
        jPanel7.add(btnVerHorarioDisponible, new org.netbeans.lib.awtextra.AbsoluteConstraints(369, 60, 160, 30));

        txtFecha.setEditable(false);
        jPanel7.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 70, -1));
        jPanel7.add(txtHoraSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 70, -1));

        jcListaHoras.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8:30 a.m.", "9:00 a.m.", "9:30 a.m.", "10:00 a.m.", "10:30 a.m.", "11:00 a.m.", "11:30 a.m.", "11:59 a.m.", "2:30 p.m.", "3:00 p.m.", "3:30 p.m.", "4:00 p.m.", "4:30 p.m.", "5:00 p.m." }));
        jPanel7.add(jcListaHoras, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 90, -1));

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("HORARIOS DISPONIBLES");
        jPanel7.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 480, 25));

        jpanelHorarios.setBackground(new java.awt.Color(214, 223, 247));
        jpanelHorarios.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true)));
        jpanelHorarios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        grupoHorario.add(optH1);
        optH1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH1.setText("8:00 - 8:30");
        optH1.setBorderPainted(true);
        optH1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 105, 30));

        grupoHorario.add(optH5);
        optH5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH5.setText("10:00 - 10:30");
        optH5.setBorderPainted(true);
        optH5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 65, 105, 30));

        grupoHorario.add(optH6);
        optH6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH6.setText("10:30 - 11:00");
        optH6.setBorderPainted(true);
        optH6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 65, 105, 30));

        grupoHorario.add(optH2);
        optH2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH2.setText("8:30 - 9:00");
        optH2.setBorderPainted(true);
        optH2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 105, 30));

        grupoHorario.add(optH3);
        optH3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH3.setText("9:00 - 9:30");
        optH3.setBorderPainted(true);
        optH3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 35, 105, 30));

        grupoHorario.add(optH7);
        optH7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH7.setText("11:00 - 11:30");
        optH7.setBorderPainted(true);
        optH7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 65, 105, 30));

        grupoHorario.add(optH8);
        optH8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH8.setText("11:30 - 12:00");
        optH8.setBorderPainted(true);
        optH8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH8, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 65, 105, 30));

        grupoHorario.add(optH4);
        optH4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH4.setText("9:30 - 10:00");
        optH4.setBorderPainted(true);
        optH4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 35, 105, 30));

        grupoHorario.add(optH9);
        optH9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH9.setText("13:00 - 13:30");
        optH9.setBorderPainted(true);
        optH9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 105, 30));

        grupoHorario.add(optH13);
        optH13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH13.setText("15:00 - 15:30");
        optH13.setBorderPainted(true);
        optH13.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 105, 30));

        grupoHorario.add(optH10);
        optH10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH10.setText("13:30 - 14:00");
        optH10.setBorderPainted(true);
        optH10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH10, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 105, 30));

        grupoHorario.add(optH14);
        optH14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH14.setText("15:30 - 16:00");
        optH14.setBorderPainted(true);
        optH14.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH14, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 105, 30));

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 0, 0));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("JORNADA MATUTINA");
        jpanelHorarios.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 7, 430, 25));

        grupoHorario.add(optH11);
        optH11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH11.setText("14:00 - 14:30");
        optH11.setBorderPainted(true);
        optH11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        optH11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optH11ActionPerformed(evt);
            }
        });
        jpanelHorarios.add(optH11, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 105, 30));

        grupoHorario.add(optH15);
        optH15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH15.setText("16:00 - 16:30");
        optH15.setBorderPainted(true);
        optH15.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH15, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, 105, 30));

        grupoHorario.add(optH16);
        optH16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH16.setText("16:30 - 17:00");
        optH16.setBorderPainted(true);
        optH16.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH16, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 105, 30));

        grupoHorario.add(optH12);
        optH12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        optH12.setText("14:30 - 15:00");
        optH12.setBorderPainted(true);
        optH12.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelHorarios.add(optH12, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 105, 30));

        jPanel7.add(jpanelHorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 530, 200));

        btnGuardarCambios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/acept-16.png"))); // NOI18N
        btnGuardarCambios.setText("Guardar Cambios");
        btnGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCambiosActionPerformed(evt);
            }
        });
        jPanel7.add(btnGuardarCambios, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 335, 210, 40));

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 0, 255));
        jLabel31.setText("Cita N¬∫:");

        lblNumeroCita.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblNumeroCita.setForeground(new java.awt.Color(255, 0, 51));
        lblNumeroCita.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout frmReprogramarCitaLayout = new javax.swing.GroupLayout(frmReprogramarCita.getContentPane());
        frmReprogramarCita.getContentPane().setLayout(frmReprogramarCitaLayout);
        frmReprogramarCitaLayout.setHorizontalGroup(
            frmReprogramarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmReprogramarCitaLayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jLabel31)
                .addGap(5, 5, 5)
                .addComponent(lblNumeroCita, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(224, Short.MAX_VALUE))
            .addGroup(frmReprogramarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
        );
        frmReprogramarCitaLayout.setVerticalGroup(
            frmReprogramarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmReprogramarCitaLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(frmReprogramarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNumeroCita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(354, Short.MAX_VALUE))
            .addGroup(frmReprogramarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
        );

        setBackground(java.awt.SystemColor.control);
        setClosable(true);
        setIconifiable(true);
        setTitle("Gestion de Citas");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jXTaskPaneContainer1.setBackground(java.awt.SystemColor.activeCaption);

        jXTaskPane1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Cita.png"))); // NOI18N
        jXTaskPane1.setTitle("OPCIONES");

        lblCancelar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_refresh.png"))); // NOI18N
        lblCancelar.setText("Anular Cita");
        lblCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCancelarMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblCancelar);

        lblReprogramar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblReprogramar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_edit.png"))); // NOI18N
        lblReprogramar.setText("Reprogramar Cita");
        lblReprogramar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblReprogramar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblReprogramarMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblReprogramar);

        lblEliminar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_delete.png"))); // NOI18N
        lblEliminar.setText("Eliminar Cita");
        lblEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEliminarMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblEliminar);

        lblCerrar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_exit.png"))); // NOI18N
        lblCerrar.setText("Cerrar Ventana");
        lblCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCerrarMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblCerrar);

        jXTaskPaneContainer1.add(jXTaskPane1);

        panelFichas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        panelCitasVigentes.setBackground(java.awt.SystemColor.activeCaption);

        tablaCitasVigentes.setBackground(new java.awt.Color(255, 255, 204));
        tablaCitasVigentes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tablaCitasVigentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaCitasVigentes.setRowHeight(25);
        tablaCitasVigentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitasVigentesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCitasVigentes);

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Datos de la Cita y Paciente"));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("N¬∫ de Cita:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Fecha:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 20, -1, -1));

        txtNumeroCita.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNumeroCita.setForeground(new java.awt.Color(255, 0, 51));
        jPanel1.add(txtNumeroCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 130, 25));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Hora:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        txtHoraCita.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtHoraCita.setForeground(new java.awt.Color(255, 0, 51));
        jPanel1.add(txtHoraCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 130, 25));

        txtFechaCita.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtFechaCita.setForeground(new java.awt.Color(255, 0, 51));
        txtFechaCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaCitaActionPerformed(evt);
            }
        });
        jPanel1.add(txtFechaCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 120, 25));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Cod. Paciente:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 45, -1, -1));

        txtIdPaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtIdPaciente.setForeground(new java.awt.Color(255, 0, 0));
        jPanel1.add(txtIdPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 45, 130, 25));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Email:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 150, -1, -1));

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 45, 290, 25));

        txtDireccion.setColumns(20);
        txtDireccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDireccion.setLineWrap(true);
        txtDireccion.setRows(5);
        txtDireccion.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtDireccion);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 490, 50));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Nombre:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 45, -1, -1));

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 290, -1));

        txtTelefono.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 125, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Direcci√≥n:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Tel√©fono:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel25.setText("Region:");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        txtRegion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(txtRegion, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 200, 25));

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel26.setText("Ciudad:");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, -1, -1));

        txtCiudad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(txtCiudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 200, 25));

        jcHorariosVencidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcHorariosVencidosActionPerformed(evt);
            }
        });
        jPanel1.add(jcHorariosVencidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 110, -1));
        jPanel1.add(txtFecSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 190, 110, -1));
        jPanel1.add(txthSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, 90, -1));

        jcIC.setToolTipText("");
        jcIC.setName(""); // NOI18N
        jPanel1.add(jcIC, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 190, 90, -1));

        javax.swing.GroupLayout panelCitasVigentesLayout = new javax.swing.GroupLayout(panelCitasVigentes);
        panelCitasVigentes.setLayout(panelCitasVigentesLayout);
        panelCitasVigentesLayout.setHorizontalGroup(
            panelCitasVigentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelCitasVigentesLayout.setVerticalGroup(
            panelCitasVigentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCitasVigentesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
        );

        panelFichas.addTab("Citas Vigentes", panelCitasVigentes);

        tablaCitasAnuladas.setBackground(new java.awt.Color(255, 255, 204));
        tablaCitasAnuladas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tablaCitasAnuladas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaCitasAnuladas.setRowHeight(25);
        tablaCitasAnuladas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitasAnuladasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaCitasAnuladas);

        jPanel4.setBackground(java.awt.SystemColor.activeCaption);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Datos de la Cita y Paciente"));
        jPanel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Cita N¬∫:");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Fecha:");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 20, -1, -1));

        txtNumeroCita1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNumeroCita1.setForeground(new java.awt.Color(255, 0, 51));
        jPanel4.add(txtNumeroCita1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 130, 25));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Hora:");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 20, -1, -1));

        txtHoraCita1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtHoraCita1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 130, 25));

        txtFechaCita1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtFechaCita1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 120, 25));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Cod. Paciente:");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 45, -1, -1));

        txtIdPaciente1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtIdPaciente1.setForeground(new java.awt.Color(255, 0, 51));
        jPanel4.add(txtIdPaciente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 45, 130, 25));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Email:");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 150, -1, -1));

        txtNombre1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 45, 290, 25));

        txtDireccion1.setColumns(20);
        txtDireccion1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDireccion1.setLineWrap(true);
        txtDireccion1.setRows(5);
        txtDireccion1.setWrapStyleWord(true);
        jScrollPane4.setViewportView(txtDireccion1);

        jPanel4.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 490, 50));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Nombre:");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 45, -1, -1));

        txtEmail1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtEmail1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 290, 25));

        txtTelefono1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtTelefono1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 125, 25));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Direcci√≥n:");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, -1, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Tel√©fono:");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        txtRegion1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtRegion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 200, 25));

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel27.setText("Region:");
        jPanel4.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel28.setText("Ciudad:");
        jPanel4.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, -1, -1));

        txtCiudad1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel4.add(txtCiudad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 200, 25));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
        );

        panelFichas.addTab("Citas Anuladas", jPanel2);

        tablaCitasVencidas.setBackground(new java.awt.Color(255, 255, 204));
        tablaCitasVencidas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tablaCitasVencidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaCitasVencidas.setRowHeight(25);
        tablaCitasVencidas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitasVencidasMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tablaCitasVencidas);

        jPanel5.setBackground(java.awt.SystemColor.activeCaption);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Datos de la Cita y Paciente"));
        jPanel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Cita N¬∫:");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText("Fecha:");
        jPanel5.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 20, -1, -1));

        txtNumeroCita2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtNumeroCita2.setForeground(new java.awt.Color(255, 0, 51));
        jPanel5.add(txtNumeroCita2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 130, 25));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setText("Hora:");
        jPanel5.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 20, -1, -1));

        txtHoraCita2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtHoraCita2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 130, 25));

        txtFechaCita2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtFechaCita2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 120, 25));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("Cod. Paciente:");
        jPanel5.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        txtIdPaciente2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtIdPaciente2.setForeground(new java.awt.Color(255, 0, 0));
        jPanel5.add(txtIdPaciente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 45, 130, 25));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setText("Email:");
        jPanel5.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 150, -1, -1));

        txtNombre2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtNombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 45, 290, 25));

        txtDireccion2.setColumns(20);
        txtDireccion2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDireccion2.setLineWrap(true);
        txtDireccion2.setRows(5);
        txtDireccion2.setWrapStyleWord(true);
        jScrollPane6.setViewportView(txtDireccion2);

        jPanel5.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 490, 50));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel22.setText("Nombre:");
        jPanel5.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 45, -1, -1));

        txtEmail2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtEmail2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 290, 25));

        txtTelefono2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtTelefono2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 125, 25));

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel23.setText("Direcci√≥n:");
        jPanel5.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, -1, -1));

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel24.setText("Tel√©fono:");
        jPanel5.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        txtRegion2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtRegion2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 200, 25));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel29.setText("Region:");
        jPanel5.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel30.setText("Ciudad:");
        jPanel5.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, -1, -1));

        txtCiudad2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(txtCiudad2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 200, 25));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
        );

        panelFichas.addTab("Citas Vencidas", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelFichas, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFichas)
            .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        updateTablaCitasVigentes();
        updateTablaCitasAnuladas();
        updateTablaCitasVencidas();
        obtenerFechaActual();
        citasVencidas2();
        activaBotones(false, false, false, true);
        bloquearControles1(false, false, false, false, false, false, false, false, false, false);
        bloquearControles2(false, false, false, false, false, false, false, false, false, false);
        bloquearControles3(false, false, false, false, false, false, false, false, false, false);
        citasVencidas();//metodo para averiguar si a la fecha actual se vencio una cita programada, que no se llevo a cabo        
        ocultaControles();

    }//GEN-LAST:event_formInternalFrameOpened

    private void tablaCitasVigentesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitasVigentesMouseClicked
        // Colocar en cada control los datos segun el registro seleccionado en la tabla

        fila = tablaCitasVigentes.rowAtPoint(evt.getPoint());//se obtiene la posicion de la fila

        String ic = null;
        String ip = null;
        String fe = null;
        String h = null;
        String nombre = null;
        String dir = null;
        String re = null;
        String ciu = null;
        String tel = null;
        String ema = null;

        if (fila > -1) {
            activaBotones(true, true, false, true);
            /*colocamos en los campos del formulario, el valor correspondiente obtenido
             * de la posicion de la fila y de la posicion de la columna. 
             */
            ic = (String) tablaCitasVigentes.getValueAt(tablaCitasVigentes.getSelectedRow(), 0);//numero de cita
            ip = (String) tablaCitasVigentes.getValueAt(tablaCitasVigentes.getSelectedRow(), 1);//id del paciente
            fe = (String) tablaCitasVigentes.getValueAt(tablaCitasVigentes.getSelectedRow(), 2);//fecha dela cita
            h = (String) tablaCitasVigentes.getValueAt(tablaCitasVigentes.getSelectedRow(), 3);//hora de la cita

            //Consulta para obtener los datos del paciente
            con = new bdConexion();
            try {
                PreparedStatement pstm = (PreparedStatement) con.getConnection().prepareStatement("SELECT * FROM paciente WHERE IdPaciente='" + ip + "'");
                ResultSet resul = pstm.executeQuery();

                //BUCLE PARA OBTENER LOS DATOS DEL PACIENTE
                while (resul.next()) {
                    nombre = resul.getString("nombres") + " " + resul.getString("apellidos");
                    dir = resul.getString("direccion");
                    re = resul.getString("region");
                    ciu = resul.getString("ciudad");
                    tel = resul.getString("telefono");
                    ema = resul.getString("email");
                }
                resul.close();
            } catch (SQLException e) {
                System.out.println(e);
            }

            //para finalizar colocamos los datos en los campos correspondiente del formulario            
            txtNumeroCita.setText(ic);
            txtFechaCita.setText(fe);
            txtHoraCita.setText(h);
            txtIdPaciente.setText(ip);
            txtNombre.setText(nombre);
            txtDireccion.setText(dir);
            txtRegion.setText(re);
            txtCiudad.setText(ciu);
            txtTelefono.setText(tel);
            txtEmail.setText(ema);

        }//fin del if                  
    }//GEN-LAST:event_tablaCitasVigentesMouseClicked

    private void tablaCitasAnuladasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitasAnuladasMouseClicked
        // Colocar en cada control los datos segun el registro seleccionado en la tabla

        fila = tablaCitasAnuladas.rowAtPoint(evt.getPoint());//se obtiene la posicion de la fila

        String ic = null;
        String ip = null;
        String fe = null;
        String h = null;
        String nombre = null;
        String dir = null;
        String re = null;
        String ciu = null;
        String tel = null;
        String ema = null;

        if (fila > -1) {
            activaBotones(false, false, true, true);
            /*colocamos en los campos del formulario, el valor correspondiente obtenido
             * de la posicion de la fila y de la posicion de la columna. 
             */
            ic = (String) tablaCitasAnuladas.getValueAt(tablaCitasAnuladas.getSelectedRow(), 0);//numero de cita
            ip = (String) tablaCitasAnuladas.getValueAt(tablaCitasAnuladas.getSelectedRow(), 1);//id del paciente
            fe = (String) tablaCitasAnuladas.getValueAt(tablaCitasAnuladas.getSelectedRow(), 2);//fecha dela cita
            h = (String) tablaCitasAnuladas.getValueAt(tablaCitasAnuladas.getSelectedRow(), 3);//hora de la cita

            //Consulta para obtener los datos del paciente
            con = new bdConexion();
            try {
                PreparedStatement pstm = (PreparedStatement) con.getConnection().prepareStatement("SELECT * FROM paciente WHERE IdPaciente='" + ip + "'");
                ResultSet resul = pstm.executeQuery();

                //BUCLE PARA OBTENER LOS DATOS DEL PACIENTE
                while (resul.next()) {
                    nombre = resul.getString("nombres") + " " + resul.getString("apellidos");
                    dir = resul.getString("direccion");
                    re = resul.getString("region");
                    ciu = resul.getString("ciudad");
                    tel = resul.getString("telefono");
                    ema = resul.getString("email");
                }
                resul.close();
            } catch (SQLException e) {
                System.out.println(e);
            }

            //para finalizar colocamos los datos en los campos correspondiente del formulario            
            txtNumeroCita1.setText(ic);
            txtFechaCita1.setText(fe);
            txtHoraCita1.setText(h);
            txtIdPaciente1.setText(ip);
            txtNombre1.setText(nombre);
            txtDireccion1.setText(dir);
            txtRegion1.setText(re);
            txtCiudad1.setText(ciu);
            txtTelefono1.setText(tel);
            txtEmail1.setText(ema);

        }//fin del if 
    }//GEN-LAST:event_tablaCitasAnuladasMouseClicked

    private void tablaCitasVencidasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitasVencidasMouseClicked
        // Colocar en cada control los datos segun el registro seleccionado en la tabla

        fila = tablaCitasVencidas.rowAtPoint(evt.getPoint());//se obtiene la posicion de la fila

        String ic = null;
        String ip = null;
        String fe = null;
        String h = null;
        String nombre = null;
        String dir = null;
        String re = null;
        String ciu = null;
        String tel = null;
        String ema = null;

        if (fila > -1) {
            activaBotones(false, true, true, true);
            /*colocamos en los campos del formulario, el valor correspondiente obtenido
             * de la posicion de la fila y de la posicion de la columna. 
             */
            ic = (String) tablaCitasVencidas.getValueAt(tablaCitasVencidas.getSelectedRow(), 0);//numero de cita
            ip = (String) tablaCitasVencidas.getValueAt(tablaCitasVencidas.getSelectedRow(), 1);//id del paciente
            fe = (String) tablaCitasVencidas.getValueAt(tablaCitasVencidas.getSelectedRow(), 2);//fecha dela cita
            h = (String) tablaCitasVencidas.getValueAt(tablaCitasVencidas.getSelectedRow(), 3);//hora de la cita

            //Consulta para obtener los datos del paciente
            con = new bdConexion();
            try {
                PreparedStatement pstm = (PreparedStatement) con.getConnection().prepareStatement("SELECT * FROM paciente WHERE IdPaciente='" + ip + "'");
                ResultSet resul = pstm.executeQuery();

                //BUCLE PARA OBTENER LOS DATOS DEL PACIENTE
                while (resul.next()) {
                    nombre = resul.getString("nombres") + " " + resul.getString("apellidos");
                    dir = resul.getString("direccion");
                    re = resul.getString("region");
                    ciu = resul.getString("ciudad");
                    tel = resul.getString("telefono1");
                    ema = resul.getString("telefono2");
                }
                resul.close();
            } catch (SQLException e) {
                System.out.println(e);
            }

            //para finalizar colocamos los datos en los campos correspondiente del formulario            
            txtNumeroCita2.setText(ic);
            txtFechaCita2.setText(fe);
            txtHoraCita2.setText(h);
            txtIdPaciente2.setText(ip);
            txtNombre2.setText(nombre);
            txtDireccion2.setText(dir);
            txtRegion2.setText(re);
            txtCiudad2.setText(ciu);
            txtTelefono2.setText(tel);
            txtEmail2.setText(ema);

        }//fin del if 
    }//GEN-LAST:event_tablaCitasVencidasMouseClicked

    private void lblCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancelarMouseClicked
        // TODO add your handling code here:
        /*en la varianle pestana guardamos el indice de la pesta√±a que esta activa,
         * de esta manera sabemos que operacion realizar...
         */
        int pestana = panelFichas.getSelectedIndex();

        if (pestana == 0) {
            anularCita();
            updateTablaCitasVigentes();
            updateTablaCitasAnuladas();
            activaBotones(false, false, false, true);
            limpiarControles();
        } else if (pestana == 1) {

            activaBotones(false, false, false, true);
        } else {
            activaBotones(false, false, false, true);
        }
    }//GEN-LAST:event_lblCancelarMouseClicked

    private void lblReprogramarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblReprogramarMouseClicked
        // TODO add your handling code here:        
        frmReprogramarCita.setVisible(true);
    }//GEN-LAST:event_lblReprogramarMouseClicked

    private void lblEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEliminarMouseClicked
        // TODO add your handling code here:
        /*en la varianle pestana guardamos el indice de la pesta√±a que esta activa,
         * de esta manera sabemos que operacion realizar...
         */
        int pestana = panelFichas.getSelectedIndex();

        if (pestana == 0) {
            activaBotones(false, false, false, true);
        } else if (pestana == 1) {
            eliminarCitasAnuladas();
            updateTablaCitasAnuladas();
            activaBotones(false, false, false, true);
            limpiarControles();
        } else {
            eliminarCitasVencidas();
            updateTablaCitasVencidas();
            activaBotones(false, false, false, true);
            limpiarControles();
        }
    }//GEN-LAST:event_lblEliminarMouseClicked

    private void jdFechaCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jdFechaCitaMouseClicked
        // TODO add your handling code here:
        grupoHorario.clearSelection();
    }//GEN-LAST:event_jdFechaCitaMouseClicked

    private void btnVerHorarioDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHorarioDisponibleActionPerformed
        // TODO add your handling code here:
        if (jdFechaCita.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Elija la fecha de la cita primero");
        } else {
            btnGuardarCambios.setEnabled(true);
            validarFechaCita();//Validamos que la fecha sea correcta            
        }

    }//GEN-LAST:event_btnVerHorarioDisponibleActionPerformed

    private void btnGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCambiosActionPerformed
        // llamada al metodo reprogramarCitas
        reprogramarCitas();
        limpiarFrmReprogramarCita();
        limpiarControles();
    }//GEN-LAST:event_btnGuardarCambiosActionPerformed

    private void frmReprogramarCitaWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frmReprogramarCitaWindowActivated
        // TODO add your handling code here:
        frmReprogramarCita.setSize(560, 430);
        frmReprogramarCita.setResizable(true);
        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
        btnGuardarCambios.setEnabled(false);
        int pestana = panelFichas.getSelectedIndex();

        if (pestana == 0) {
            lblNumeroCita.setText(txtNumeroCita.getText());
            obtenerFechaActual();
        } else if (pestana == 2) {
            lblNumeroCita.setText(txtNumeroCita2.getText());
            obtenerFechaActual();
        } else {
            //no realizar ninguna accion
        }
    }//GEN-LAST:event_frmReprogramarCitaWindowActivated

    private void lblCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCerrarMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_lblCerrarMouseClicked

    private void jcHorariosVencidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcHorariosVencidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcHorariosVencidosActionPerformed

    private void txtFechaCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaCitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaCitaActionPerformed

    private void optH11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optH11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optH11ActionPerformed

    //METODO PARA ANULAR UNA CITA QUE ESTA VIGENTE
    private void anularCita() {
        int fil = -1;

        fil = tablaCitasVigentes.getSelectedRow();//obtiene el indice de la fila seleccionada

        if (fil < 0) {
            JOptionPane.showMessageDialog(null, "Seleccione una fila de la tabla primero");
        } else {
            //obtenemos el codigo de la fila seleccionda, el cual nos servira para eliminarlo
            String numCita = (String) tablaCitasVigentes.getValueAt(tablaCitasVigentes.getSelectedRow(), 0);

            int resp = JOptionPane.showConfirmDialog(null, "¬øConfirma que desea anular la cita " + numCita + "?", "Pregunta", 0);
            if (resp == 0) {
                gC.anularCita(numCita);

                //Actualizamos el modelo de datos de la tabla citaVigentes...
                DefaultTableModel dtm1 = (DefaultTableModel) tablaCitasVigentes.getModel();
                dtm1.removeRow(tablaCitasVigentes.getSelectedRow());
            }
        }
    }

    //METODO PARA ELIMINAR UNA CITA QUE FUE ANULADA
    private void eliminarCitasAnuladas() {
        int fil = -1;
        fil = tablaCitasAnuladas.getSelectedRow();//obtiene el indice de la fila seleccionada              

        if (fil < 0) {
            JOptionPane.showMessageDialog(null, "Seleccione una fila de la tabla primero");
        } else {
            //obtenemos el codigo de la fila seleccionda, el cual nos servira para eliminarlo
            String ic = (String) tablaCitasAnuladas.getValueAt(tablaCitasAnuladas.getSelectedRow(), 0);

            int resp = JOptionPane.showConfirmDialog(null, "¬øConfirma que desea eliminar la Cita N¬∞: " + ic + "?", "Pregunta", 0);
            if (resp == 0) {
                try {
                    int rows_update = 0;
                    java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("DELETE FROM citas WHERE IdCita='" + ic + "'");
                    rows_update = pstm.executeUpdate();
                    pstm.close();

                    if (rows_update == 1) {
                        JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar el registro, verifique datos");

                        con.desconectar();
                    }

                    //ACTUALIZAMOS EL MODELO DE DATOS DE LA TABLA citasAnuladas
                    DefaultTableModel dtm1 = (DefaultTableModel) tablaCitasAnuladas.getModel();
                    dtm1.removeRow(tablaCitasAnuladas.getSelectedRow());
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

    //METODO PARA ELIMINAR UNA CITA QUE SE VENCIO
    private void eliminarCitasVencidas() {
        int fil = -1;
        fil = tablaCitasVencidas.getSelectedRow();//obtiene el indice de la fila seleccionada              

        if (fil < 0) {
            JOptionPane.showMessageDialog(null, "Seleccione una fila de la tabla primero");
        } else {
            //obtenemos el codigo de la fila seleccionda, el cual nos servira para eliminarlo
            String ic = (String) tablaCitasVencidas.getValueAt(tablaCitasVencidas.getSelectedRow(), 0);

            int resp = JOptionPane.showConfirmDialog(null, "¬øConfirma que desea eliminar la Cita N¬∞: " + ic + "?", "Pregunta", 0);
            if (resp == 0) {
                try {
                    int rows_update = 0;
                    java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("DELETE FROM citas WHERE IdCita='" + ic + "'");
                    rows_update = pstm.executeUpdate();
                    pstm.close();

                    if (rows_update == 1) {
                        JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar el registro, verifique datos");

                        con.desconectar();
                    }

                    //ACTUALIZAMOS EL MODELO DE DATOS DE LA TABLA citasVencidas
                    DefaultTableModel dtm1 = (DefaultTableModel) tablaCitasVencidas.getModel();
                    dtm1.removeRow(tablaCitasVencidas.getSelectedRow());
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

    //meotodo activaBotones
    private void activaBotones(boolean a, boolean r, boolean e, boolean c) {
        lblCancelar.setEnabled(a);
        lblReprogramar.setEnabled(r);
        lblEliminar.setEnabled(e);
        lblCerrar.setEnabled(c);
    }

    /*METODOS PARA BLOQUEAR LOS CONTROLES*/
    private void bloquearControles1(boolean ic, boolean fc, boolean hc, boolean ip, boolean np, boolean dp, boolean re, boolean ci, boolean t1, boolean em) {
        //controles de la pesta√±a citasVigentes
        txtNumeroCita.setEditable(ic);
        txtFechaCita.setEditable(fc);
        txtHoraCita.setEditable(hc);
        txtIdPaciente.setEditable(ip);
        txtNombre.setEditable(np);
        txtDireccion.setEditable(dp);
        txtRegion.setEditable(re);
        txtCiudad.setEditable(ci);
        txtTelefono.setEditable(t1);
        txtEmail.setEditable(em);
    }

    private void bloquearControles2(boolean ic, boolean fc, boolean hc, boolean ip, boolean np, boolean dp, boolean re, boolean ci, boolean t1, boolean em) {
        //controles de la pesta√±a citasVigentes
        txtNumeroCita1.setEditable(ic);
        txtFechaCita1.setEditable(fc);
        txtHoraCita1.setEditable(hc);
        txtIdPaciente1.setEditable(ip);
        txtNombre1.setEditable(np);
        txtDireccion1.setEditable(dp);
        txtRegion1.setEditable(re);
        txtCiudad1.setEditable(ci);
        txtTelefono1.setEditable(t1);
        txtEmail1.setEditable(em);
    }

    private void bloquearControles3(boolean ic, boolean fc, boolean hc, boolean ip, boolean np, boolean dp, boolean re, boolean ci, boolean t1, boolean em) {
        //controles de la pesta√±a citasVigentes
        txtNumeroCita2.setEditable(ic);
        txtFechaCita2.setEditable(fc);
        txtHoraCita2.setEditable(hc);
        txtIdPaciente2.setEditable(ip);
        txtNombre2.setEditable(np);
        txtDireccion2.setEditable(dp);
        txtRegion2.setEditable(re);
        txtCiudad2.setEditable(ci);
        txtTelefono2.setEditable(t1);
        txtEmail2.setEditable(em);
    }

    private void limpiarControles() {

        int pestana = panelFichas.getSelectedIndex();

        if (pestana == 0) {
            txtNumeroCita.setText("");
            txtFechaCita.setText("");
            txtHoraCita.setText("");
            txtIdPaciente.setText("");
            txtNombre.setText("");
            txtDireccion.setText("");
            txtRegion.setText("");
            txtCiudad.setText("");
            txtTelefono.setText("");
            txtEmail.setText("");
        } else if (pestana == 1) {
            txtNumeroCita1.setText("");
            txtFechaCita1.setText("");
            txtHoraCita1.setText("");
            txtIdPaciente1.setText("");
            txtNombre1.setText("");
            txtDireccion1.setText("");
            txtRegion1.setText("");
            txtCiudad1.setText("");
            txtTelefono1.setText("");
            txtEmail1.setText("");
        } else {
            txtNumeroCita2.setText("");
            txtFechaCita2.setText("");
            txtHoraCita2.setText("");
            txtIdPaciente2.setText("");
            txtNombre2.setText("");
            txtDireccion2.setText("");
            txtRegion2.setText("");
            txtCiudad2.setText("");
            txtTelefono2.setText("");
            txtEmail2.setText("");
        }
    }

    //METODO PARA LIMPIAR LOS OBJETOS DEL FORMULARIO REPROGRAMAR CITA
    public void limpiarFrmReprogramarCita() {
        lblNumeroCita.setText("");
        jdFechaCita.setDate(null);
        grupoHorario.clearSelection();
    }

    //METODO REPROGRAMAR CITA
    private void reprogramarCitas() {

        String nC = null;
        String hCita = null;
        String e = null;

        //para obtener la fecha del control jdatechooser
        String formato = "yyyy-MM-dd";
        java.util.Date date = jdFechaCita.getDate();
        String fe = String.valueOf(date);
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        fe = (sdf.format(date));

        //para obtener la hora seleccionada del grupo de opciones
        if (optH1.isSelected()) {
            hCita = "8:00 - 8:30 a.m.";
        } else if (optH2.isSelected()) {
            hCita = "8:30 - 9:00 a.m.";
        } else if (optH3.isSelected()) {
            hCita = "9:00 - 9:30 a.m.";
        } else if (optH4.isSelected()) {
            hCita = "9:30 - 10:00 a.m.";
        } else if (optH5.isSelected()) {
            hCita = "10:00 - 10:30 a.m.";
        } else if (optH6.isSelected()) {
            hCita = "10:30 - 11:00 a.m.";
        } else if (optH7.isSelected()) {
            hCita = "11:00 - 11:30 a.m.";
        } else if (optH8.isSelected()) {
            hCita = "11:30 - 11:59 a.m.";
        } else if (optH9.isSelected()) {
            hCita = "13:00 - 13:30 p.m.";
        } else if (optH10.isSelected()) {
            hCita = "13:30 - 14:00 p.m.";
        } else if (optH11.isSelected()) {
            hCita = "14:00 - 14:30 p.m.";
        } else if (optH12.isSelected()) {
            hCita = "14:30 - 15:00 p.m.";
        } else if (optH13.isSelected()) {
            hCita = "15:00 - 15:30 p.m.";
        } else if (optH14.isSelected()) {
            hCita = "15:30 - 16:00 p.m.";
        } else if (optH15.isSelected()) {
            hCita = "16:00 - 16:30 p.m.";
        } else if (optH16.isSelected()) {
            hCita = "16:30 - 17:00 p.m.";
        }

        if (hCita == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un horario para la cita", "SICO", 2);
        } else {
            //obtener el idCita
            nC = lblNumeroCita.getText();

            /*en la varianle pestana guardamos el indice de la pesta√±a que esta activa,
                 * de esta manera sabemos que operacion realizar...
             */
            int pestana = panelFichas.getSelectedIndex();

            if (pestana == 0) {

                e = "1";
                gC.reprogramarCita(nC, fe, hCita, e);//enviamos los datos al constructor del metodo reprogramar cita de la clase gestionCitas
                JOptionPane.showMessageDialog(null, "La Nueva Cita se guardo correctamente");
                frmReprogramarCita.dispose();
                updateTablaCitasVigentes();
            } else if (pestana == 2) {
                e = "2";
                gC.reprogramarCita(nC, fe, hCita, e);//enviamos los datos al constructor del metodo reprogramar cita de la clase gestionCitas
                JOptionPane.showMessageDialog(null, "La Nueva Cita se guardo correctamente");
                frmReprogramarCita.dispose();
                updateTablaCitasVencidas();
                updateTablaCitasVigentes();
            } else {
                //no hacer nada
            }
        }
    }

    //metodo para validar la hora de la cita
    public void validarHoraCita() {
//        String fechaCita=null;
//        String horaCita=null;

        //para obtener la fecha
        String formato = "yyyy-MM-dd";
        java.util.Date date = jdFechaCita.getDate();
        String fecC = String.valueOf(date);
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        fecC = (sdf.format(date));

        //realizar consulta a la bd para averiguar cuales horarios ya estan asignados segun la fecha seleccionada
        int registros = 0;
        try {
            java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT count(1) as total FROM citas WHERE fecha='" + fecC + "' AND estado=1");//cuenta cuantos registros existen con esta fecha
            ResultSet res = pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();

            if (registros <= 0)//significa que no existen registros con la fecha asignada
            {
                //habilitamos todos los horarios ya que para esta fecha ninguno ha sido asignado aun
                activaOpcionesHorario(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            } else {
                con = new bdConexion();
                java.sql.PreparedStatement pstm1 = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT hora FROM citas WHERE fecha='" + fecC + "' AND estado=1");
                ResultSet res1 = pstm1.executeQuery();

                activaOpcionesHorario(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);

                //BUCLE QUE PERMITE LLENAR EL COMBO
                while (res1.next()) {

                    if ("8:00 - 8:30 a.m.".equals(res1.getString("hora"))) {
                        optH1.setEnabled(false);
                    } else if ("8:30 - 9:00 a.m.".equals(res1.getString("hora"))) {
                        optH2.setEnabled(false);
                    } else if ("9:00 - 9:30 a.m.".equals(res1.getString("hora"))) {
                        optH3.setEnabled(false);
                    } else if ("9:30 - 10:00 a.m.".equals(res1.getString("hora"))) {
                        optH4.setEnabled(false);
                    } else if ("10:00 - 10:30 a.m.".equals(res1.getString("hora"))) {
                        optH5.setEnabled(false);
                    } else if ("10:30 - 11:00".equals(res1.getString("hora"))) {
                        optH6.setEnabled(false);
                    } else if ("11:00 - 11:30 a.m.".equals(res1.getString("hora"))) {
                        optH7.setEnabled(false);
                    } else if ("11:30 - 11:59 a.m.".equals(res1.getString("hora"))) {
                        optH8.setEnabled(false);
                    } else if ("13:00 - 13:30 a.m.".equals(res1.getString("hora"))) {
                        optH9.setEnabled(false);
                    } else if ("13:30 - 14:00 p.m.".equals(res1.getString("hora"))) {
                        optH10.setEnabled(false);
                    } else if ("14:00 - 14:30 p.m.".equals(res1.getString("hora"))) {
                        optH11.setEnabled(false);
                    } else if ("14:30 - 15:00 p.m.".equals(res1.getString("hora"))) {
                        optH12.setEnabled(false);
                    } else if ("15:00 - 15:30 p.m.".equals(res1.getString("hora"))) {
                        optH13.setEnabled(false);
                    } else if ("15:30 - 16:00 p.m.".equals(res1.getString("hora"))) {
                        optH14.setEnabled(false);
                    } else if ("16:00 - 16:30 p.m.".equals(res1.getString("hora"))) {
                        optH15.setEnabled(false);
                    } else {
                        optH16.setEnabled(false);
                    }
                }

                res1.close();
            }

        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    //METODO PARA BLOQUEAR LOS CONTROLES DE HORARIO   
    public void activaOpcionesHorario(boolean h1, boolean h2, boolean h3, boolean h4, boolean h5, boolean h6, boolean h7, boolean h8, boolean h9, boolean h10, boolean h11, boolean h12, boolean h13, boolean h14, boolean h15, boolean h16) {
        //activar o descativar las opciones de horario
        optH1.setEnabled(h1);
        optH2.setEnabled(h2);
        optH3.setEnabled(h3);
        optH4.setEnabled(h4);
        optH5.setEnabled(h5);
        optH6.setEnabled(h6);
        optH7.setEnabled(h7);
        optH8.setEnabled(h8);
        optH9.setEnabled(h9);
        optH10.setEnabled(h10);
        optH11.setEnabled(h11);
        optH12.setEnabled(h12);
        optH13.setEnabled(h13);
        optH14.setEnabled(h14);
        optH15.setEnabled(h15);
        optH16.setEnabled(h16);
    }

    //METODO PARA VALIDAR LA FECHA
    private void obtenerFechaActual() {
        /*Obtener la Fecha Actual A√±o-Mes-Dia*/
        Calendar c = Calendar.getInstance();//creamos una instancia de la clase calendar de java

        String dia = Integer.toString(c.get(Calendar.DATE));
        String mes = Integer.toString(c.get(Calendar.MONTH) + 1);
        String annio = Integer.toString(c.get(Calendar.YEAR));

        String hora = Integer.toString(c.get(Calendar.HOUR_OF_DAY));
        String minuto = Integer.toString(c.get(Calendar.MINUTE));
        String segundo = Integer.toString(c.get(Calendar.SECOND));
        String ampm = Integer.valueOf(c.get(Calendar.AM_PM)) == Calendar.AM ? "a.m." : "p.m.";

        int d = Integer.parseInt(dia);
        int m = Integer.parseInt(mes);

        if (m < 10) {
            mes = "0" + m;
        }

        if (d < 10) {
            txtFecha.setText(annio + "-" + mes + "-0" + dia);
            txtFecSistema.setText(annio + "-" + mes + "-0" + dia);
        } else {
            txtFecha.setText(annio + "-" + mes + "-" + dia);
            txtFecSistema.setText(annio + "-" + mes + "-" + dia);
        }

        /*Obtener la Hora Actual Hora:Minuto*/
        int h = Integer.parseInt(hora);
        int mi = Integer.parseInt(minuto);

        if (h < 10 && mi < 10) {
            txtHoraSistema.setText("0" + hora + ":0" + minuto);
            txthSistema.setText("0" + hora + ":0" + minuto);
        } else {
            txtHoraSistema.setText(hora + ':' + minuto);
            txthSistema.setText(hora + ':' + minuto);
        }

    }

    //METODO PARA VALIDAR LA FECHA DE LA CITA
    private void validarFechaCita() {
        String feActual = String.valueOf(txtFecha.getText());
        String feSeleccionada = null;

        //para obtener la fecha
        String formato = "yyyy-MM-dd";
        java.util.Date date = jdFechaCita.getDate();
        feSeleccionada = String.valueOf(date);

        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        feSeleccionada = (sdf.format(date));

        /*si la fecha actual del sistema es mayor a la fecha seleccionada en el control jdFecha
         * indica que es se selecciono una fecha ya pasada por lo tanto es un error...
         */
        if (feActual.compareTo(feSeleccionada) > 0) {
            JOptionPane.showMessageDialog(null, "Error, Verifique la fecha de la nueva cita");
        } else if (feActual.compareTo(feSeleccionada) < 0)//la fecha seleccionada es mayor a la del sistema actual.
        {
            //Al ser mayor la fecha seleccionada a la actual, podemos mostrar los horarios diponibles para esa fecha
            validarHoraCita();//procedimiento para mostrar las horas disponibles segun la fecha elegida
        } else {
            /*En este caso se considera que la fecha seleccionada es la de hoy mismo
             * asi que se debe verificar q no se seleccione una hora ya vencida tambien.
             */
            validarHoraCita2();
        }

    }

    //METODO PARA VALIDAR LA HORA DE LA CITA SI ES PARA LA FECHA ACTUAL
    //metodo para validar la hora de la cita
    public void validarHoraCita2() {

        //para obtener la fecha
        String formato = "yyyy-MM-dd";
        java.util.Date date = jdFechaCita.getDate();
        String fecC = String.valueOf(date);
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        fecC = (sdf.format(date));

        //lista de horas de trabajo
        String h1 = "08:30";
        String h2 = "09:00";
        String h3 = "09:30";
        String h4 = "10:00";
        String h5 = "10:30";
        String h6 = "11:00";
        String h7 = "11:30";
        String h8 = "11:59";
        String h9 = "13:30";
        String h10 = "14:00";
        String h11 = "14:30";
        String h12 = "15:00";
        String h13 = "15:30";
        String h14 = "16:00";
        String h15 = "16:30";
        String h16 = "17:00";

        //realizar consulta a la bd para averiguar cuales horarios ya estan asignados segun la fecha seleccionada
        int registros = 0;
        try {
            java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT count(1) as total FROM citas WHERE fecha ='" + fecC + "' AND estado=1");//cuenta cuantos registros hay con esta fecha
            ResultSet res = pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();
//            JOptionPane.showMessageDialog(null, registros);

            if (registros > 0)//significa que hay registros con esta fecha
            {
                //tendria que deshabilitar todas las horas que son menores a la hora actual
                String hAc = txtHoraSistema.getText();

                try {
                    DateFormat dateFormat = new SimpleDateFormat("HH:mm");
                    Date horaS, hora1, hora2, hora3, hora4, hora5, hora6, hora7, hora8, hora9, hora10, hora11, hora12, hora13, hora14, hora15, hora16;
                    horaS = dateFormat.parse(hAc);
                    hora1 = dateFormat.parse(h1);
                    hora2 = dateFormat.parse(h2);
                    hora3 = dateFormat.parse(h3);
                    hora4 = dateFormat.parse(h4);
                    hora5 = dateFormat.parse(h5);
                    hora6 = dateFormat.parse(h6);
                    hora7 = dateFormat.parse(h7);
                    hora8 = dateFormat.parse(h8);
                    hora9 = dateFormat.parse(h9);
                    hora10 = dateFormat.parse(h10);
                    hora11 = dateFormat.parse(h11);
                    hora12 = dateFormat.parse(h12);
                    hora13 = dateFormat.parse(h13);
                    hora14 = dateFormat.parse(h14);
                    hora15 = dateFormat.parse(h15);
                    hora16 = dateFormat.parse(h16);

                    if (horaS.compareTo(hora1) >= 0) {
                        activaOpcionesHorario(false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora2) >= 0) {
                        activaOpcionesHorario(false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora3) > 0) {
                        activaOpcionesHorario(false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora4) >= 0) {
                        activaOpcionesHorario(false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora5) >= 0) {
                        activaOpcionesHorario(false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora6) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora7) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora8) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora9) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora10) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora11) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora12) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true);
                    }
                    if (horaS.compareTo(hora13) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true);
                    }
                    if (horaS.compareTo(hora14) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true);
                    }
                    if (horaS.compareTo(hora15) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true);
                    }
                    if (horaS.compareTo(hora16) >= 0) {
                        JOptionPane.showMessageDialog(null, "Para este dia ya no hay hora dispobible");
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
                    }

                } catch (ParseException parseException) {
                    parseException.printStackTrace();
                }

            } else//en caso contrario al no haber citas asignadas a esta fecha, igual se debe bloquear las horas menores a la hora actual
            {
                //tendria que deshabilitar todas las horas que son menores a la hora actual
                String hAc = txtHoraSistema.getText();

                try {
                    DateFormat dateFormat = new SimpleDateFormat("HH:mm");
                    Date horaS, hora1, hora2, hora3, hora4, hora5, hora6, hora7, hora8, hora9, hora10, hora11, hora12, hora13, hora14, hora15, hora16;
                    horaS = dateFormat.parse(hAc);
                    hora1 = dateFormat.parse(h1);
                    hora2 = dateFormat.parse(h2);
                    hora3 = dateFormat.parse(h3);
                    hora4 = dateFormat.parse(h4);
                    hora5 = dateFormat.parse(h5);
                    hora6 = dateFormat.parse(h6);
                    hora7 = dateFormat.parse(h7);
                    hora8 = dateFormat.parse(h8);
                    hora9 = dateFormat.parse(h9);
                    hora10 = dateFormat.parse(h10);
                    hora11 = dateFormat.parse(h11);
                    hora12 = dateFormat.parse(h12);
                    hora13 = dateFormat.parse(h13);
                    hora14 = dateFormat.parse(h14);
                    hora15 = dateFormat.parse(h15);
                    hora16 = dateFormat.parse(h16);

                    if (horaS.compareTo(hora1) >= 0) {
                        activaOpcionesHorario(false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora2) >= 0) {
                        activaOpcionesHorario(false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora3) > 0) {
                        activaOpcionesHorario(false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora4) >= 0) {
                        activaOpcionesHorario(false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora5) >= 0) {
                        activaOpcionesHorario(false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora6) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora7) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora8) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora9) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora10) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora11) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true);
                    }
                    if (horaS.compareTo(hora12) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true);
                    }
                    if (horaS.compareTo(hora13) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true);
                    }
                    if (horaS.compareTo(hora14) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true);
                    }
                    if (horaS.compareTo(hora15) >= 0) {
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true);
                    }
                    if (horaS.compareTo(hora16) >= 0) {
                        JOptionPane.showMessageDialog(null, "Para este dia ya no hay hora dispobible");
                        activaOpcionesHorario(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
                    }

                } catch (ParseException parseException) {
                    parseException.printStackTrace();
                }
            }
        } catch (SQLException e) {
            System.out.println(e);
        }

        try {
            con = new bdConexion();
            java.sql.PreparedStatement pstm1 = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT hora FROM citas WHERE fecha='" + fecC + "' AND estado=1");
            ResultSet res1 = pstm1.executeQuery();

            //BUCLE PARA BLOQUEAR LAS HORAS YA ASIGNADAS
            while (res1.next()) {

                if ("8:00 - 8:30 a.m.".equals(res1.getString("hora"))) {
                    optH1.setEnabled(false);
                } else if ("8:30 - 9:00 a.m.".equals(res1.getString("hora"))) {
                    optH2.setEnabled(false);
                } else if ("9:00 - 9:30 a.m.".equals(res1.getString("hora"))) {
                    optH3.setEnabled(false);
                } else if ("9:30 - 10:00 a.m.".equals(res1.getString("hora"))) {
                    optH4.setEnabled(false);
                } else if ("10:00 - 10:30".equals(res1.getString("hora"))) {
                    optH5.setEnabled(false);
                } else if ("10:30 - 11:00 a.m.".equals(res1.getString("hora"))) {
                    optH6.setEnabled(false);
                } else if ("11:00 - 11:30 a.m.".equals(res1.getString("hora"))) {
                    optH7.setEnabled(false);
                } else if ("11:30 - 11:59 a.m.".equals(res1.getString("hora"))) {
                    optH8.setEnabled(false);
                } else if ("13:00 - 13:30 p.m.".equals(res1.getString("hora"))) {
                    optH9.setEnabled(false);
                } else if ("13:30 - 14:00 p.m.".equals(res1.getString("hora"))) {
                    optH10.setEnabled(false);
                } else if ("14:00 - 14:30 p.m.".equals(res1.getString("hora"))) {
                    optH11.setEnabled(false);
                } else if ("14:30 - 15:00 p.m.".equals(res1.getString("hora"))) {
                    optH12.setEnabled(false);
                } else if ("15:00 - 15:30 p.m.".equals(res1.getString("hora"))) {
                    optH13.setEnabled(false);
                } else if ("15:30 - 16:00 p.m.".equals(res1.getString("hora"))) {
                    optH14.setEnabled(false);
                } else if ("16:00 - 16:30 p.m.".equals(res1.getString("hora"))) {
                    optH15.setEnabled(false);
                } else {
                    optH16.setEnabled(false);
                }
            }

            res1.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    public void citasVencidas() {
        String fecC = txtFecSistema.getText();

        //realizar consulta a la bd para averiguar cuales horarios ya estan asignados segun la fecha actual
        int registros = 0;
        try {
            con = new bdConexion();
            java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT count(1) as total FROM citas WHERE fecha='" + fecC + "' AND estado=1");//cuenta cuantos registros existen con esta fecha
            ResultSet res = pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();

            if (registros <= 0)//significa que no existen registros con la fecha asignada
            {
                //no hacemos nada puesto que no hay citas para este dia!!!
            } else {
                jcHorariosVencidos.removeAllItems();
                jcIC.removeAllItems();

                con = new bdConexion();
                java.sql.PreparedStatement pstm1 = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT IdCita, hora FROM citas WHERE fecha='" + fecC + "' AND estado=1 ORDER BY hora");
                ResultSet res1 = pstm1.executeQuery();

                //BUCLE QUE PERMITE LLENAR EL COMBO
                while (res1.next()) {

                    if ("8:00 - 8:30 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("8:30 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("8:30 - 9:00 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("9:00 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("9:00 - 9:30 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("9:30 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("9:30 - 10:00 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("10:00 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("10:00 - 10:30 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("10:30 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("10:30 - 11:00 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("11:00 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("11:00 - 11:30 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("11:30 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("11:30 - 11:59 a.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("11:59 a.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("13:00 - 13:30 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("13:30 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("13:30 - 14:00 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("14:00 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("14:00 - 14:30 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("14:30 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("14:30 - 15:00 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("15:00 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("15:00 - 15:30 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("15:30 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("15:30 - 16:00 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("16:00 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else if ("16:00 - 16:30 p.m.".equals(res1.getString("hora"))) {
                        jcHorariosVencidos.addItem("16:30 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    } else {
                        jcHorariosVencidos.addItem("17:00 p.m.");
                        jcIC.addItem(res1.getString("IdCita"));
                    }
                }

                res1.close();
            }

        } catch (SQLException e) {
            System.out.println(e);
        }

        int nH = jcHorariosVencidos.getItemCount();
        String hs = txthSistema.getText();

        for (int i = 0; i < nH; i++) {
            String h = (String) jcHorariosVencidos.getModel().getElementAt(i);
            String ic = (String) jcIC.getModel().getElementAt(i);

            try {
                DateFormat dateFormat = new SimpleDateFormat("HH:mm");
                Date date1, date2;
                date1 = dateFormat.parse(hs);
                date2 = dateFormat.parse(h);

                if (date1.compareTo(date2) > 0) {
                    try {
                        java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("UPDATE citas SET estado=2 WHERE IdCita='" + ic + "' AND fecha='" + fecC + "'");
                        pstm.executeUpdate();
                        pstm.close();
                    } catch (SQLException e) {
                        System.out.println(e);
                    }
                    updateTablaCitasVigentes();
                    updateTablaCitasVencidas();
                }
            } catch (ParseException parseException) {
                parseException.printStackTrace();
            }
        }

    }

    private void citasVencidas2() {
        String fecC = txtFecSistema.getText();

        /*en base a esta fecha evaluar si hay fechas menores a esta con estado vigente
         * si las hubiere significa que ya estan vencidas, asi que se debe cambiar su estado
         * a 2 vencidas....
         */
        int registros = 0;
        try {
            con = new bdConexion();
            java.sql.PreparedStatement pstm = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT count(1) as total FROM citas WHERE fecha<'" + fecC + "'");//cuenta cuantos registros existen con fecha menor a la actual
            ResultSet res = pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();

            if (registros <= 0)//significa que no existen registros con la fecha anterior
            {
                //no hacemos nada
            } else {
                con = new bdConexion();
                java.sql.PreparedStatement pstm1 = (java.sql.PreparedStatement) con.getConnection().prepareStatement("SELECT IdCita FROM citas WHERE fecha<'" + fecC + "' AND estado=1");
                ResultSet res1 = pstm1.executeQuery();

                String ic = null;

                // BUCLE QUE PERMITE LLENAR EL COMBO
                while (res1.next()) {
                    ic = res1.getString("IdCita");
                    gC.citasVencidas(ic);
                }

                updateTablaCitasVigentes();
                updateTablaCitasVencidas();

                res1.close();
            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    private void ocultaControles() {
        txtHoraSistema.setVisible(false);
        txtFecha.setVisible(false);
        txtFecSistema.setVisible(false);
        txthSistema.setVisible(false);
        jcListaHoras.setVisible(false);
        jcIC.setVisible(false);
        jcHorariosVencidos.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardarCambios;
    private javax.swing.JButton btnVerHorarioDisponible;
    private javax.swing.JDialog frmReprogramarCita;
    private javax.swing.ButtonGroup grupoHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    private javax.swing.JComboBox jcHorariosVencidos;
    private javax.swing.JComboBox jcIC;
    private javax.swing.JComboBox jcListaHoras;
    private com.toedter.calendar.JDateChooser jdFechaCita;
    private javax.swing.JPanel jpanelHorarios;
    private javax.swing.JLabel lblCancelar;
    private javax.swing.JLabel lblCerrar;
    private javax.swing.JLabel lblEliminar;
    private javax.swing.JLabel lblNumeroCita;
    private javax.swing.JLabel lblReprogramar;
    private javax.swing.JRadioButton optH1;
    private javax.swing.JRadioButton optH10;
    private javax.swing.JRadioButton optH11;
    private javax.swing.JRadioButton optH12;
    private javax.swing.JRadioButton optH13;
    private javax.swing.JRadioButton optH14;
    private javax.swing.JRadioButton optH15;
    private javax.swing.JRadioButton optH16;
    private javax.swing.JRadioButton optH2;
    private javax.swing.JRadioButton optH3;
    private javax.swing.JRadioButton optH4;
    private javax.swing.JRadioButton optH5;
    private javax.swing.JRadioButton optH6;
    private javax.swing.JRadioButton optH7;
    private javax.swing.JRadioButton optH8;
    private javax.swing.JRadioButton optH9;
    private javax.swing.JPanel panelCitasVigentes;
    private javax.swing.JTabbedPane panelFichas;
    private javax.swing.JTable tablaCitasAnuladas;
    private javax.swing.JTable tablaCitasVencidas;
    private javax.swing.JTable tablaCitasVigentes;
    private javax.swing.JTextField txtCiudad;
    private javax.swing.JTextField txtCiudad1;
    private javax.swing.JTextField txtCiudad2;
    private javax.swing.JTextArea txtDireccion;
    private javax.swing.JTextArea txtDireccion1;
    private javax.swing.JTextArea txtDireccion2;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmail1;
    private javax.swing.JTextField txtEmail2;
    private javax.swing.JTextField txtFecSistema;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFechaCita;
    private javax.swing.JTextField txtFechaCita1;
    private javax.swing.JTextField txtFechaCita2;
    private javax.swing.JTextField txtHoraCita;
    private javax.swing.JTextField txtHoraCita1;
    private javax.swing.JTextField txtHoraCita2;
    private javax.swing.JTextField txtHoraSistema;
    private javax.swing.JTextField txtIdPaciente;
    private javax.swing.JTextField txtIdPaciente1;
    private javax.swing.JTextField txtIdPaciente2;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombre1;
    private javax.swing.JTextField txtNombre2;
    private javax.swing.JTextField txtNumeroCita;
    private javax.swing.JTextField txtNumeroCita1;
    private javax.swing.JTextField txtNumeroCita2;
    private javax.swing.JTextField txtRegion;
    private javax.swing.JTextField txtRegion1;
    private javax.swing.JTextField txtRegion2;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtTelefono1;
    private javax.swing.JTextField txtTelefono2;
    private javax.swing.JTextField txthSistema;
    // End of variables declaration//GEN-END:variables
}
