package formularios;

import clases.ImagenFondo;
import clases.bdConexion;
import clases.paciente;
import clases.reportePacientes;
import clases.reporteRecetasMedicas;
import clases.reporteTablasAuxiliares;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

/**
 *
 * @author laptop-1
 */
public class frmPrincipal extends javax.swing.JFrame {

    bdConexion con;

    reportePacientes rPac = new reportePacientes();
    reporteTablasAuxiliares rTA = new reporteTablasAuxiliares();
    reporteRecetasMedicas rRM = new reporteRecetasMedicas();

    paciente pa = new paciente();
    Object[][] dtPaciente; //variable de tipo Object que almacena una matriz de datos
    int fila = -1;

    //variables booleanas para controlar los menus segun el usuario
    String cUser = null;

    String modP = null;
    String gC = null;
    String rC = null;
    String reC = null;
    String modS = null;
    String modT = null;
    String modEs = null;
    String modM = null;
    String rep = null;
    String modU = null;
    String modDE = null;
    String manBD = null;

    /**
     * Creates new form frmPrincipal
     */
    public frmPrincipal() {
        initComponents();
        this.setTitle("Sistema de Clinica Tarapakids");
        jdContenedor.setBorder(new ImagenFondo());
        mostrarFechaActual();
        mostrarHoraActual();
        updateTablaPacientes();
        txtlogico.setVisible(false);
        frmWorking.setSize(510, 230);
        frmBuscarPaciente.setSize(500, 350);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        frmBuscarPaciente = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        txtValorFiltro = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPacientes = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        frmWorking = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jdContenedor = new javax.swing.JDesktopPane();
        txtlogico = new javax.swing.JTextField();
        lblEtiquetaReloj = new javax.swing.JLabel();
        lblFechaActual = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnPacientes = new javax.swing.JButton();
        btnReservarCitas = new javax.swing.JButton();
        btnRealizarConsulta = new javax.swing.JButton();
        btnServicios = new javax.swing.JButton();
        btnTratamientos = new javax.swing.JButton();
        btnEspecialista = new javax.swing.JButton();
        btnExpedienteClinico = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        mnPrincipal = new javax.swing.JMenuBar();
        jmPacientes = new javax.swing.JMenu();
        jMenuAgregarPacientes = new javax.swing.JMenuItem();
        jmConsultas = new javax.swing.JMenu();
        jMenuGestionCitas = new javax.swing.JMenuItem();
        jMenuReservarCita = new javax.swing.JMenuItem();
        jMenuMedicamentos = new javax.swing.JMenu();
        jMenuMedicamentoMedicina = new javax.swing.JMenu();
        jMenuMedicinaAgregar = new javax.swing.JMenuItem();
        jmReportes = new javax.swing.JMenu();
        jMenuReportePacientes = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuReporteReceta = new javax.swing.JMenu();
        jMenuRecetaPaciente = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuReporteEspecialista = new javax.swing.JMenuItem();
        jMenuReporteTratamiento = new javax.swing.JMenuItem();
        jMenuReporteServicios = new javax.swing.JMenuItem();
        jMenuReporteMedicamentos = new javax.swing.JMenuItem();
        jmConfiguracion = new javax.swing.JMenu();
        jmUsuarios = new javax.swing.JMenu();
        jmAgregarUsuarios = new javax.swing.JMenuItem();
        jmEmpresa = new javax.swing.JMenu();
        jmDatosGenerales = new javax.swing.JMenuItem();
        jmBaseDatos = new javax.swing.JMenu();
        jmCopiaSeguridad = new javax.swing.JMenuItem();
        jmRestaurarbd = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmDestinoBackup = new javax.swing.JMenuItem();
        jmSalir = new javax.swing.JMenu();
        jMenuSalir = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        frmBuscarPaciente.setTitle("Pacientes");
        frmBuscarPaciente.setBounds(new java.awt.Rectangle(300, 300, 400, 300));
        frmBuscarPaciente.setModal(true);
        frmBuscarPaciente.setResizable(false);
        frmBuscarPaciente.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                frmBuscarPacienteWindowActivated(evt);
            }
        });

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar por:"));

        txtValorFiltro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtValorFiltro.setForeground(new java.awt.Color(0, 0, 255));
        txtValorFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorFiltroKeyTyped(evt);
            }
        });

        tablaPacientes.setBackground(new java.awt.Color(255, 255, 204));
        tablaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaPacientes);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Nombre del Paciente:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtValorFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValorFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SELECCIONE UN PACIENTE DE LA LISTA");

        javax.swing.GroupLayout frmBuscarPacienteLayout = new javax.swing.GroupLayout(frmBuscarPaciente.getContentPane());
        frmBuscarPaciente.getContentPane().setLayout(frmBuscarPacienteLayout);
        frmBuscarPacienteLayout.setHorizontalGroup(
            frmBuscarPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmBuscarPacienteLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(frmBuscarPacienteLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        frmBuscarPacienteLayout.setVerticalGroup(
            frmBuscarPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frmBuscarPacienteLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        frmWorking.setTitle("Procesando");
        frmWorking.setBackground(java.awt.SystemColor.activeCaption);
        frmWorking.setIconImage(null);
        frmWorking.setMinimumSize(new java.awt.Dimension(340, 115));
        frmWorking.setModal(true);
        frmWorking.setUndecorated(true);
        frmWorking.setResizable(false);
        frmWorking.setSize(new java.awt.Dimension(340, 115));
        frmWorking.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                frmWorkingWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                frmWorkingWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Este Proceso Tomará Algunos Minutos");

        jButton1.setText("SI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("NO");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("¿Desea continuar?");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/warning.png"))); // NOI18N
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout frmWorkingLayout = new javax.swing.GroupLayout(frmWorking.getContentPane());
        frmWorking.getContentPane().setLayout(frmWorkingLayout);
        frmWorkingLayout.setHorizontalGroup(
            frmWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmWorkingLayout.createSequentialGroup()
                .addGroup(frmWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frmWorkingLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(frmWorkingLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(frmWorkingLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(frmWorkingLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );
        frmWorkingLayout.setVerticalGroup(
            frmWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmWorkingLayout.createSequentialGroup()
                .addGroup(frmWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frmWorkingLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(frmWorkingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(frmWorkingLayout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(frmWorkingLayout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(frmWorkingLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jLabel5))))
                    .addGroup(frmWorkingLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Informatico de Control Odontológico");
        setBackground(java.awt.SystemColor.activeCaption);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jdContenedor.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.focusedBackground"));
        jdContenedor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtlogico.setEditable(false);
        jdContenedor.add(txtlogico);
        txtlogico.setBounds(50, 350, 98, 22);

        lblEtiquetaReloj.setFont(new java.awt.Font("Segoe UI", 1, 55)); // NOI18N
        lblEtiquetaReloj.setForeground(new java.awt.Color(102, 102, 255));
        lblEtiquetaReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEtiquetaReloj.setText("jLabel4");
        jdContenedor.add(lblEtiquetaReloj);
        lblEtiquetaReloj.setBounds(10, 60, 800, 70);

        lblFechaActual.setFont(new java.awt.Font("Segoe UI", 3, 40)); // NOI18N
        lblFechaActual.setForeground(new java.awt.Color(102, 102, 255));
        lblFechaActual.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechaActual.setText("jLabel4");
        jdContenedor.add(lblFechaActual);
        lblFechaActual.setBounds(10, 10, 800, 50);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jToolBar1.setBackground(java.awt.SystemColor.inactiveCaption);
        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jToolBar1.setFloatable(true);
        jToolBar1.setRollover(true);

        btnPacientes.setBackground(java.awt.SystemColor.inactiveCaption);
        btnPacientes.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnPacientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72_Pacientes.png"))); // NOI18N
        btnPacientes.setText("Pacientes");
        btnPacientes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPacientes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPacientesActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPacientes);

        btnReservarCitas.setBackground(java.awt.SystemColor.inactiveCaption);
        btnReservarCitas.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnReservarCitas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72_Citas2.png"))); // NOI18N
        btnReservarCitas.setText("Reservar Citas");
        btnReservarCitas.setFocusable(false);
        btnReservarCitas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReservarCitas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReservarCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservarCitasActionPerformed(evt);
            }
        });
        jToolBar1.add(btnReservarCitas);

        btnRealizarConsulta.setBackground(java.awt.SystemColor.inactiveCaption);
        btnRealizarConsulta.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnRealizarConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/consulta_dental.png"))); // NOI18N
        btnRealizarConsulta.setText("Consultas");
        btnRealizarConsulta.setFocusable(false);
        btnRealizarConsulta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRealizarConsulta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRealizarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarConsultaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRealizarConsulta);

        btnServicios.setBackground(java.awt.SystemColor.inactiveCaption);
        btnServicios.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnServicios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72_serv.png"))); // NOI18N
        btnServicios.setText("Servicios");
        btnServicios.setFocusable(false);
        btnServicios.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnServicios.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiciosActionPerformed(evt);
            }
        });
        jToolBar1.add(btnServicios);

        btnTratamientos.setBackground(java.awt.SystemColor.inactiveCaption);
        btnTratamientos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnTratamientos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72tratamientos.png"))); // NOI18N
        btnTratamientos.setText("Tratamientos");
        btnTratamientos.setFocusable(false);
        btnTratamientos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTratamientos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTratamientos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTratamientosActionPerformed(evt);
            }
        });
        jToolBar1.add(btnTratamientos);

        btnEspecialista.setBackground(java.awt.SystemColor.inactiveCaption);
        btnEspecialista.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnEspecialista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72_Especialista1.png"))); // NOI18N
        btnEspecialista.setText("Especialista");
        btnEspecialista.setFocusable(false);
        btnEspecialista.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEspecialista.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEspecialista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEspecialistaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEspecialista);

        btnExpedienteClinico.setBackground(java.awt.SystemColor.inactiveCaption);
        btnExpedienteClinico.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnExpedienteClinico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72_expedienteClinico.png"))); // NOI18N
        btnExpedienteClinico.setText("Expediente Clinico");
        btnExpedienteClinico.setFocusable(false);
        btnExpedienteClinico.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExpedienteClinico.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExpedienteClinico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpedienteClinicoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExpedienteClinico);

        btnSalir.setBackground(java.awt.SystemColor.inactiveCaption);
        btnSalir.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/72_Salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setFocusable(false);
        btnSalir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalir);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.CENTER);

        jPanel3.setBackground(java.awt.SystemColor.activeCaption);
        jPanel3.setLayout(new java.awt.BorderLayout());

        mnPrincipal.setBackground(java.awt.SystemColor.controlHighlight);
        mnPrincipal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jmPacientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Pacientes.png"))); // NOI18N
        jmPacientes.setText("Pacientes");
        jmPacientes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuAgregarPacientes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuAgregarPacientes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuAgregarPacientes.setText("Agregar/Modificar");
        jMenuAgregarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAgregarPacientesActionPerformed(evt);
            }
        });
        jmPacientes.add(jMenuAgregarPacientes);

        mnPrincipal.add(jmPacientes);

        jmConsultas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Cita.png"))); // NOI18N
        jmConsultas.setText("Citas");
        jmConsultas.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jmConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmConsultasActionPerformed(evt);
            }
        });

        jMenuGestionCitas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuGestionCitas.setText("Gestionar Citas");
        jMenuGestionCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGestionCitasActionPerformed(evt);
            }
        });
        jmConsultas.add(jMenuGestionCitas);

        jMenuReservarCita.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuReservarCita.setText("Reservar Cita");
        jMenuReservarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReservarCitaActionPerformed(evt);
            }
        });
        jmConsultas.add(jMenuReservarCita);

        mnPrincipal.add(jmConsultas);

        jMenuMedicamentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Tratamiento.png"))); // NOI18N
        jMenuMedicamentos.setText("Medicamentos");
        jMenuMedicamentos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuMedicamentoMedicina.setText("Medicinas");
        jMenuMedicamentoMedicina.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenuMedicinaAgregar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuMedicinaAgregar.setText("Agregar/Modificar");
        jMenuMedicinaAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuMedicinaAgregarActionPerformed(evt);
            }
        });
        jMenuMedicamentoMedicina.add(jMenuMedicinaAgregar);

        jMenuMedicamentos.add(jMenuMedicamentoMedicina);

        mnPrincipal.add(jMenuMedicamentos);

        jmReportes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Reportes.png"))); // NOI18N
        jmReportes.setText("Reportes");
        jmReportes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuReportePacientes.setText("Pacientes");
        jMenuReportePacientes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenuItem4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem4.setText("Expediente Clinico");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenuReportePacientes.add(jMenuItem4);

        jMenuItem5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem5.setText("Lista de Pacientes");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenuReportePacientes.add(jMenuItem5);

        jmReportes.add(jMenuReportePacientes);

        jMenuReporteReceta.setText("Recetas Medicas");
        jMenuReporteReceta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenuRecetaPaciente.setText("Por Paciente");
        jMenuRecetaPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRecetaPacienteActionPerformed(evt);
            }
        });
        jMenuReporteReceta.add(jMenuRecetaPaciente);

        jmReportes.add(jMenuReporteReceta);
        jmReportes.add(jSeparator1);

        jMenuReporteEspecialista.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuReporteEspecialista.setText("Especialista/s");
        jMenuReporteEspecialista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReporteEspecialistaActionPerformed(evt);
            }
        });
        jmReportes.add(jMenuReporteEspecialista);

        jMenuReporteTratamiento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuReporteTratamiento.setText("Tratamientos");
        jMenuReporteTratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReporteTratamientoActionPerformed(evt);
            }
        });
        jmReportes.add(jMenuReporteTratamiento);

        jMenuReporteServicios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuReporteServicios.setText("Servicios");
        jMenuReporteServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReporteServiciosActionPerformed(evt);
            }
        });
        jmReportes.add(jMenuReporteServicios);

        jMenuReporteMedicamentos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuReporteMedicamentos.setText("Medicamentos");
        jMenuReporteMedicamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReporteMedicamentosActionPerformed(evt);
            }
        });
        jmReportes.add(jMenuReporteMedicamentos);

        mnPrincipal.add(jmReportes);

        jmConfiguracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Configuracion.png"))); // NOI18N
        jmConfiguracion.setText("Configuracion");
        jmConfiguracion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jmUsuarios.setText("Usuarios");
        jmUsuarios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jmAgregarUsuarios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jmAgregarUsuarios.setText("Agregar/Modificar");
        jmAgregarUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAgregarUsuariosActionPerformed(evt);
            }
        });
        jmUsuarios.add(jmAgregarUsuarios);

        jmConfiguracion.add(jmUsuarios);

        jmEmpresa.setText("Empresa");
        jmEmpresa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jmDatosGenerales.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jmDatosGenerales.setText("Datos Generales");
        jmDatosGenerales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmDatosGeneralesActionPerformed(evt);
            }
        });
        jmEmpresa.add(jmDatosGenerales);

        jmConfiguracion.add(jmEmpresa);

        jmBaseDatos.setText("Base de Datos");
        jmBaseDatos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jmCopiaSeguridad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jmCopiaSeguridad.setText("Hacer Copia de Seguridad de la BD");
        jmCopiaSeguridad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCopiaSeguridadActionPerformed(evt);
            }
        });
        jmBaseDatos.add(jmCopiaSeguridad);

        jmRestaurarbd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jmRestaurarbd.setText("Restaurar Copia de Base de Datos");
        jmRestaurarbd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmRestaurarbdActionPerformed(evt);
            }
        });
        jmBaseDatos.add(jmRestaurarbd);

        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem1.setText("Vaciar Base De Datos (Restaurar a Inicio)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jmBaseDatos.add(jMenuItem1);

        jmDestinoBackup.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jmDestinoBackup.setText("Ubicación del BackUp Automatico");
        jmDestinoBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmDestinoBackupActionPerformed(evt);
            }
        });
        jmBaseDatos.add(jmDestinoBackup);

        jmConfiguracion.add(jmBaseDatos);

        mnPrincipal.add(jmConfiguracion);

        jmSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Salir.png"))); // NOI18N
        jmSalir.setText("Salir");
        jmSalir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuSalir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuSalir.setText("Salir");
        jMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSalirActionPerformed(evt);
            }
        });
        jmSalir.add(jMenuSalir);

        mnPrincipal.add(jmSalir);

        setJMenuBar(mnPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jdContenedor)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addComponent(jdContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //maximiza la pantalla
        setExtendedState(frmPrincipal.MAXIMIZED_BOTH);

        //Se crea un directorio an la unidad C:, para almanecar las copias de seguridad de la bd
        File directorio = new File("C:\\BackUpClinicaDental");
        directorio.mkdir();
        try {
            accesoSistema();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void jMenuGestionCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGestionCitasActionPerformed
        // TODO add your handling code here:
        frmGestionCitas fGC = new frmGestionCitas();
        jdContenedor.add(fGC);
        fGC.show();
    }//GEN-LAST:event_jMenuGestionCitasActionPerformed

    private void jMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSalirActionPerformed
        try {
            // TODO add your handling code here:
            GenerarBackupAutomatico();//se genera una copia de seguridad al cerrar la aplicacion
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuSalirActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        try {
            // TODO add your handling code here:
            GenerarBackupAutomatico();//se genera una copia de seguridad al cerrar la aplicacion
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
        System.exit(0);
        //cerrarAplicacion();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPacientesActionPerformed
        // TODO add your handling code here:
        frmPaciente fPacien = new frmPaciente();
        jdContenedor.add(fPacien);
        fPacien.show();

    }//GEN-LAST:event_btnPacientesActionPerformed

    private void btnReservarCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservarCitasActionPerformed
        // TODO add your handling code here:
        frmCitas fCitas = new frmCitas();
        jdContenedor.add(fCitas);
        fCitas.show();
    }//GEN-LAST:event_btnReservarCitasActionPerformed

    private void btnServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiciosActionPerformed
        // TODO add your handling code here:
        frmServicios fServicios = new frmServicios();
        jdContenedor.add(fServicios);
        fServicios.show();
    }//GEN-LAST:event_btnServiciosActionPerformed

    private void btnTratamientosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTratamientosActionPerformed
        // TODO add your handling code here:
        frmTratamientos fTratamientos = new frmTratamientos();
        jdContenedor.add(fTratamientos);
        fTratamientos.show();
    }//GEN-LAST:event_btnTratamientosActionPerformed

    private void btnEspecialistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEspecialistaActionPerformed
        // TODO add your handling code here:
        frmEspecialista fEspecialista = new frmEspecialista();
        jdContenedor.add(fEspecialista);
        fEspecialista.show();
    }//GEN-LAST:event_btnEspecialistaActionPerformed

    private void jMenuReservarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuReservarCitaActionPerformed
        // TODO add your handling code here:
        frmCitas fCitas = new frmCitas();
        jdContenedor.add(fCitas);
        fCitas.show();
    }//GEN-LAST:event_jMenuReservarCitaActionPerformed

    private void jmConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmConsultasActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jmConsultasActionPerformed

    private void btnRealizarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarConsultaActionPerformed
        // TODO add your handling code here:
        frmConsultas fConsulta = new frmConsultas();
        jdContenedor.add(fConsulta);
        fConsulta.show();

    }//GEN-LAST:event_btnRealizarConsultaActionPerformed

    private void jMenuMedicinaAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuMedicinaAgregarActionPerformed
        // TODO add your handling code here:
        frmMedicamentos fMed = new frmMedicamentos();
        jdContenedor.add(fMed);
        fMed.show();
    }//GEN-LAST:event_jMenuMedicinaAgregarActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        try {
            rPac.abrirReporteListadoPacientes();
            //frmWorking.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuReporteTratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuReporteTratamientoActionPerformed
        try {
            // TODO add your handling code here:
            rTA.abrirReporteListadoTratamientos();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuReporteTratamientoActionPerformed

    private void jMenuReporteServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuReporteServiciosActionPerformed
        try {
            // TODO add your handling code here:
            rTA.abrirReporteListadoServicios();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuReporteServiciosActionPerformed

    private void jMenuReporteEspecialistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuReporteEspecialistaActionPerformed
        try {
            rTA.abrirReporteListadoEspecialistas();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuReporteEspecialistaActionPerformed

    private void jMenuReporteMedicamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuReporteMedicamentosActionPerformed
        try {
            // TODO add your handling code here:
            rTA.abrirReporteListadoMedicamentos();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuReporteMedicamentosActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        txtlogico.setText("1");
        frmBuscarPaciente.setVisible(true);
        //frmBuscarPaciente.show();                        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /*TABLA PARA BUSCAR AL PACIENTE Y MOSTRAR SU EXPEDIENTE CLINICO O RECETA MEDICA SEGUN EL CASO*/
    private void tablaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPacientesMouseClicked
        // TODO add your handling code here:
        // MUESTRA CADA REGISTRO SELECCIONADO EN LOS CAMPOS CORRESPONDIENTES DEL FORMULARIO
        fila = tablaPacientes.rowAtPoint(evt.getPoint());//obtiene el indice de la fila seleccionada

        if (fila > -1) {

            /*colocamos en los campos del formulario, el valor correspondiente obtenido
            * de la posicion de la fila y de la posicion de la columna.
             */
            String ip = (String.valueOf(tablaPacientes.getValueAt(fila, 0)));
            if (txtlogico.getText().equals("0"))//mostar reporte receta por paciente
            {
                rRM.abrirReporteRecetaMedicaPorPaciente(ip);
                this.frmBuscarPaciente.dispose();
                txtlogico.setText("");
            } else {
                try {
                    rPac.abrirReporteExpedienteClinicoPaciente(ip);
                } catch (SQLException ex) {
                    Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.frmBuscarPaciente.dispose();
                txtlogico.setText("");

            }
        }
    }//GEN-LAST:event_tablaPacientesMouseClicked

    private void jMenuRecetaPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRecetaPacienteActionPerformed
        // TODO add your handling code here:
        txtlogico.setText("0");
        //updateTabla();
        frmBuscarPaciente.setVisible(true);
        //frmBuscarPaciente.show();
    }//GEN-LAST:event_jMenuRecetaPacienteActionPerformed

    private void btnExpedienteClinicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpedienteClinicoActionPerformed
        // TODO add your handling code here:
        txtlogico.setText("1");
        //updateTabla();
        frmBuscarPaciente.setVisible(true);
        //frmBuscarPaciente.show();
    }//GEN-LAST:event_btnExpedienteClinicoActionPerformed

    private void jMenuAgregarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAgregarPacientesActionPerformed
        // TODO add your handling code here:
        frmPaciente fPacien = new frmPaciente();
        jdContenedor.add(fPacien);
        fPacien.show();
    }//GEN-LAST:event_jMenuAgregarPacientesActionPerformed

    private void jmDestinoBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmDestinoBackupActionPerformed
        // METODO PARA CAMBIAR LA RUTA DONDE SE ALMACENAN LOS BACKUP DE LA BASE DE DATOS
        destinoBackup();
    }//GEN-LAST:event_jmDestinoBackupActionPerformed

    private void jmRestaurarbdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmRestaurarbdActionPerformed
        // METODO RESTAURAR BD
        int resp;
        resp = JOptionPane.showConfirmDialog(null, "Este proceso puede tardar algunos minutos \n ¿Desea continuar?", "Atención", 0);

        if (resp == 0) {
            restoreDB();
        }
    }//GEN-LAST:event_jmRestaurarbdActionPerformed

    private void jmCopiaSeguridadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCopiaSeguridadActionPerformed
        // METODO HACER BACKUP BD
        backupDB();
    }//GEN-LAST:event_jmCopiaSeguridadActionPerformed

    private void jmDatosGeneralesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmDatosGeneralesActionPerformed
        // TODO add your handling code here:
        frmDatosEmpresa fDatEmp = new frmDatosEmpresa();
        jdContenedor.add(fDatEmp);
        fDatEmp.show();
    }//GEN-LAST:event_jmDatosGeneralesActionPerformed

    private void jmAgregarUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAgregarUsuariosActionPerformed
        // TODO add your handling code here:
        frmUsuarios fUsers = new frmUsuarios();
        jdContenedor.add(fUsers);
        fUsers.show();
    }//GEN-LAST:event_jmAgregarUsuariosActionPerformed

    private void frmWorkingWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frmWorkingWindowOpened


    }//GEN-LAST:event_frmWorkingWindowOpened

    private void frmWorkingWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frmWorkingWindowActivated
        //frmWorking.setSize(340,120);
        // txtLogico.setText("3");              
    }//GEN-LAST:event_frmWorkingWindowActivated

    private void txtValorFiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorFiltroKeyTyped
        String vBuscar = "nombres";
        String vValor = txtValorFiltro.getText();
        try {
            tablaPacientes.setModel(pa.buscarPaciente2(vBuscar, vValor));
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
            Logger.getLogger(frmPaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtValorFiltroKeyTyped

    private void frmBuscarPacienteWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frmBuscarPacienteWindowActivated
        updateTablaPacientes();
        //frmBuscarPaciente.setSize(500,350);
    }//GEN-LAST:event_frmBuscarPacienteWindowActivated

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        frmWorking.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        vaciarDB();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        frmWorking.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    //METODO PARA ACTUALIZAR LOS REGISTROS DE LA TABLA buscar paciente
    private void updateTablaPacientes() {
        String[] columNames = {"IdPaciente", "Nombre del paciente"};
        //usamos la funcion
        dtPaciente = pa.getDatos2Pacientes();

        // se colocan los datos en la tabla    
        DefaultTableModel datos = new DefaultTableModel(dtPaciente, columNames);
        tablaPacientes.setModel(datos);
        TableColumnModel columnModel = tablaPacientes.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(20);
        columnModel.getColumn(1).setPreferredWidth(200);
    }

    public void setAnchoColummnas() {
        JViewport scroll = (JViewport) tablaPacientes.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tablaPacientes.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tablaPacientes.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (30 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (70 * ancho) / 100;
                    break;

            }
            columnaTabla.setPreferredWidth(anchoColumna);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new frmPrincipal().setVisible(true);
            }
        });
    }

    //Metodo para validar al usuario y el acceso a los permisos que tiene en el sistema
    public void accesoSistema() throws SQLException {

        try {
            con = new bdConexion();

            ResultSet resultado = null;
            PreparedStatement pstml = (PreparedStatement) con.getConnection().prepareStatement("SELECT * FROM usuarios WHERE  IdUsuario='" + cUser + "'");
            resultado = pstml.executeQuery();

            int x = 0;
            resultado.last();

            if (resultado.getRow() <= 0) {
                JOptionPane.showMessageDialog(null, "Error, Nombre de Usuario incorrecto", "SICO", 1);

            } else {
                resultado.beforeFirst();

                while (resultado.next()) {

                    modP = resultado.getString("modificarPaciente");
                    gC = resultado.getString("gestionarCitas");
                    rC = resultado.getString("reservarCitas");
                    reC = resultado.getString("realizarConsultas");
                    modS = resultado.getString("modificarServicios");
                    modT = resultado.getString("modificarTratamientos");
                    modEs = resultado.getString("modificarEspecialista");
                    modM = resultado.getString("modificarMedicamentos");
                    rep = resultado.getString("verImprimirReportes");
                    modU = resultado.getString("modificarUsuarios");
                    modDE = resultado.getString("modificarDatosEmpresa");
                    manBD = resultado.getString("manipularBD");

                    x++;
                }

                if (modP.equals("1")) {
                    jMenuAgregarPacientes.setEnabled(true);
                    btnPacientes.setEnabled(true);
                } else {
                    jMenuAgregarPacientes.setEnabled(false);
                    btnPacientes.setEnabled(false);
                }
                if (gC.equals("1")) {
                    jMenuGestionCitas.setEnabled(true);
                } else {
                    jMenuGestionCitas.setEnabled(false);
                }
                if (rC.equals("1")) {
                    jMenuReservarCita.setEnabled(true);
                    btnReservarCitas.setEnabled(true);
                } else {
                    jMenuReservarCita.setEnabled(false);
                    btnReservarCitas.setEnabled(false);
                }
                if (reC.equals("1")) {
                    btnRealizarConsulta.setEnabled(true);
                } else {
                    btnRealizarConsulta.setEnabled(false);
                }
                if (modS.equals("1")) {
                    btnServicios.setEnabled(true);
                } else {
                    btnServicios.setEnabled(false);
                }
                //--------------------
                if (modT.equals("1")) {
                    btnTratamientos.setEnabled(true);
                } else {
                    btnTratamientos.setEnabled(false);
                }
                if (modEs.equals("1")) {
                    btnEspecialista.setEnabled(true);
                } else {
                    btnEspecialista.setEnabled(false);
                }
                if (rep.equals("1")) {
                    jmReportes.setEnabled(true);
                } else {
                    jmReportes.setEnabled(false);
                }
                if (modU.equals("1")) {
                    jmUsuarios.setEnabled(true);
                } else {
                    jmUsuarios.setEnabled(false);
                }
                //-----------------------
                if (modDE.equals("1")) {
                    jmEmpresa.setEnabled(true);
                } else {
                    jmEmpresa.setEnabled(false);
                }
                if (manBD.equals("1")) {
                    jmBaseDatos.setEnabled(true);
                } else {
                    jmBaseDatos.setEnabled(false);
                }
            }
            pstml.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage());
        }
        con.desconectar();

    }

    //Generar copia de seguridad de la base de datos, especificando la ubicacion manualmente
    void backupDB() {
        Calendar c = Calendar.getInstance();//creamos una instancia de la clase calendar de java
        //java.util.Date fecha = new Date();
        String DiaHoy = Integer.toString(c.get(Calendar.DATE));
        String MesHoy = Integer.toString(c.get(Calendar.MONTH) + 1);
        String AnioHoy = Integer.toString(c.get(Calendar.YEAR));

        JFileChooser RealizarBackupMySQL = new JFileChooser();
        int resp;
        resp = RealizarBackupMySQL.showSaveDialog(this);//JFileChooser de nombre RealizarBackupMySQL
        if (resp == JFileChooser.APPROVE_OPTION) {//Si el usuario presiona aceptar; se genera el Backup
            try {
                /* - Datos de acceso a nuestra base de datos */
                String dbServer = "localhost";
                /* El nombre de tu base de datos*/
                String dbName = "clinicadental";
                /* El usuario de tu base de datos*/
                String dbUser = "root";
                /* La contraseña de la base de datos (dejarla en texto plano puede 
            ser un problema)*/
                String dbPass = "root";

                /*El nombre y ruta a donde se guardara el archivo de volcado .sql*/
                File backupFile = new File(String.valueOf(RealizarBackupMySQL.getSelectedFile().toString()) + "_" + DiaHoy + "-" + MesHoy + "-" + AnioHoy + ".sql");
                //String sqlFile = "backups\respaldo.sql";
                System.out.println("Ruta del back: " + backupFile);

                /* La linea de comando completa que ejecutara el programa*/
                String command = System.getProperty("user.dir") + "/bin/mysqldump --host " + dbServer + " -u " + dbUser
                        + " -p" + dbPass + " " + dbName + " -r " + backupFile;

                /*Se crea un proceso que ejecuta el comando dado*/
                Process bck = Runtime.getRuntime().exec(command);

                /* Obtiene el flujo de datos del proceso, esto se hace para obtener 
            el texto del proceso*/
                InputStream stdout = bck.getErrorStream();

                /* Se obtiene el resultado de finalizacion del proceso*/
                int resultado = bck.waitFor();

                String line;

                /* Se crea un buffer de lectura con el flujo de datos outstd y ese mismo
            sera leido e impreso, esto mostrara el texto que muestre el programa
            mysqldump, de esta forma sabra cual es el error en su comando*/
                BufferedReader brCleanUp
                        = new BufferedReader(new InputStreamReader(stdout));
                while ((line = brCleanUp.readLine()) != null) {
                    System.out.println(line);
                }
                brCleanUp.close();

                if (resultado == 0) {
                    JOptionPane.showMessageDialog(null, "Respaldo realizado exitosamente");
                    System.out.println("Respaldo exitoso");
                } else {
                    JOptionPane.showMessageDialog(null, "Error al intentar realizar el respaldo");
                    System.out.println("Error al respaldar");
                }
            } catch (IOException | InterruptedException ex) {
                System.out.println("Exception: " + ex.getMessage());
                JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
            }
        } else if (resp == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(null, "Ha sido cancelada la generacion del Backup");
        }
    }

    //METODO restaurar una copia de la base de datos
    void restoreDB() {
        /* - Datos de acceso a nuestra base de datos */
        String dbServer = "localhost";
        /* El nombre de tu base de datos*/
        String dbName = "clinicadental";
        /* El usuario de tu base de datos*/
        String dbUser = "root";
        /* La contraseña de la base de datos (dejarla en texto plano puede 
            ser un problema)*/
        String dbPass = "root";

        int resp;
        JFileChooser RealizarBackupMySQL = new JFileChooser();
        resp = RealizarBackupMySQL.showOpenDialog(this);//Muestra el cuadro con la opcion abrir
        if (resp == JFileChooser.APPROVE_OPTION) {//Si el usuario presiona aceptar(Abrir); Backup
            try {
                String ubicacion = String.valueOf(RealizarBackupMySQL.getSelectedFile().toString().trim());

                //en nombre almacenamos la ruta del fichero con extension sql que se desea restaurar...
                String nombre = ubicacion.substring(ubicacion.lastIndexOf('/') + 1);
                //File fichero=new File(nombre);
                //String dd=fichero.getName();//aqui obtenermos el nombre del fichero con extension sql.

                /* Comando a ejecutar, note que se utiliza un array, ya que una sola
                linea causaria un bloqueo de búfer*/
                String command[] = new String[]{System.getProperty("user.dir") + "/bin/mysql", dbName, "-u" + dbUser, "-p"
                    + dbPass, "-e", " source " + nombre};

                /*Se crea un proceso que ejecuta el comando dado*/
                Process bck = Runtime.getRuntime().exec(command);
                System.out.println("Algo: " + bck);

                /* Obtiene el flujo de datos del proceso, esto se hace para obtener 
            el texto del proceso*/
                InputStream stdout = bck.getErrorStream();

                /* Se obtiene el resultado de finalizacion del proceso*/
                int resultado = bck.waitFor();

                String line = null;

                /* Se crea un buffer de lectura con el flujo de datos outstd y ese mismo
            sera leido e impreso, esto mostrara el texto que muestre el programa
            mysqldump, de esta forma sabra cual es el error en su comando*/
                BufferedReader brCleanUp
                        = new BufferedReader(new InputStreamReader(stdout));
                while ((line = brCleanUp.readLine()) != null) {
                    frmWorking.setVisible(false);
                    frmWorking.dispose();
                    //JOptionPane.showMessageDialog(null,"Procesando... "+line);                    
                    System.out.println("buffer enbucle: " + brCleanUp);
                    System.out.println("Otra cosa: " + line);
                }

                brCleanUp.close();

                if (resultado == 0) {
                    frmWorking.setVisible(false);
                    System.out.println("Restauración exitosa");
                    JOptionPane.showMessageDialog(null, "La restauración de la Base de Datos ha sido exitosa");

                } else {
                    JOptionPane.showMessageDialog(null, "Error al restaurar la Base de Datos");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ha sido cancelada la restauración del Backup");
        }

    }

    //METODO restaurar la base de datos al inicio de todos los tiempos
    void vaciarDB() {
        /* - Datos de acceso a nuestra base de datos */
        String dbServer = "localhost";
        /* El nombre de tu base de datos*/
        String dbName = "clinicadental";
        /* El usuario de tu base de datos*/
        String dbUser = "root";
        /* La contraseña de la base de datos (dejarla en texto plano puede 
            ser un problema)*/
        String dbPass = "root";

        try {
            //Ubicacion del restore a utilizar
            String ubicacion = System.getProperty("user.dir") + "/BackUpClinicaDental/Restore_BackUp_Clinica_Inicio.sql".trim();

            /* Comando a ejecutar, note que se utiliza un array, ya que una sola
                linea causaria un bloqueo de búfer*/
            String command[] = new String[]{System.getProperty("user.dir") + "/bin/mysql", dbName, "-u" + dbUser, "-p"
                + dbPass, "-e", " source " + ubicacion};

            /*Se crea un proceso que ejecuta el comando dado*/
            Process bck = Runtime.getRuntime().exec(command);

            /* Obtiene el flujo de datos del proceso, esto se hace para obtener 
            el texto del proceso*/
            InputStream stdout = bck.getErrorStream();

            /* Se obtiene el resultado de finalizacion del proceso*/
            int resultado = bck.waitFor();

            String line = null;

            /* Se crea un buffer de lectura con el flujo de datos outstd y ese mismo
            sera leido e impreso, esto mostrara el texto que muestre el programa
            mysqldump, de esta forma sabra cual es el error en su comando*/
            BufferedReader brCleanUp
                    = new BufferedReader(new InputStreamReader(stdout));
            while ((line = brCleanUp.readLine()) != null) {
                //JOptionPane.showMessageDialog(null,"Procesando... "+line);                    
                System.out.println("buffer en bucle: " + brCleanUp);
                System.out.println("Posible error: " + line);
            }

            brCleanUp.close();

            if (resultado == 0) {

                frmWorking.dispose();
                JOptionPane.showMessageDialog(null, "La Base de Datos ha sido vaciada exitosamente");

            } else {

                frmWorking.dispose();
                JOptionPane.showMessageDialog(null, "Error al vaciar la Base de Datos");
            }
        } catch (Exception ex) {

            frmWorking.dispose();
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }

    }

    //metodo para cambiar la ruta del backcup automatico
    void destinoBackup() {
        //Crear un objeto FileChooser
        JFileChooser fc = new JFileChooser();
        //Mostrar la ventana para abrir archivo y recoger la respuesta
        //En el parámetro del showOpenDialog se indica la ventana
        //  al que estará asociado. Con el valor this se asocia a la
        //  ventana que la abre.
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);//solo tomara directorios o carpetas

        int respuesta = fc.showOpenDialog(this);
        //Comprobar si se ha pulsado Aceptar
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            //Crear un objeto File con el archivo elegido
            File archivoElegido = (fc.getSelectedFile());
            //Mostrar la nueva ruta
            JOptionPane.showMessageDialog(null, "La nueva ruta es: '" + archivoElegido + "'");
            //****************************
            String ruta = String.valueOf(archivoElegido);
            String sep = "\\";
            String nuevoSep = "\\\\";

            StringTokenizer tokens = new StringTokenizer(ruta, sep);

            //Para guardar la ruta corregida
            String rutaCorregida = new String();

            //Contar los tokens (en este caso las carpetas, contado tambien el nombre del archivo seleccionado).
            int noTokens = tokens.countTokens();

            int i = 1;

            do {      //Agregar el nuevo separador

                rutaCorregida += tokens.nextToken() + nuevoSep;

                i++;

            } while (i < noTokens);

            //Agregar a la ruta corregida el ultimo token, (nombre del archivo)
            rutaCorregida += tokens.nextToken();

            /**
             * ***********************
             * ahora guardamos esa ruta en la base de datos. pero antes debemos
             * verificar si la tabla esta vacia si lo esta hacemos un insert de
             * lo contrario un update
             */
            try {
                con = new bdConexion();
                ResultSet resultado = null;
                PreparedStatement pstmx = (PreparedStatement) con.getConnection().prepareStatement("SELECT * FROM rutabackup");
                resultado = pstmx.executeQuery();

                resultado.last();

                if (resultado.getRow() <= 0)//significa que esta vacia la tabla
                {
                    try {
                        PreparedStatement pstm = (PreparedStatement) con.getConnection().prepareStatement("insert into " + " rutabackup(rutaBD)" + "values (?)");

                        pstm.setString(1, rutaCorregida);

                        pstm.execute();
                        pstm.close();
                    } catch (SQLException e) {
                        System.out.print(e);
                    }
                } else // significa que contiene informacion, asi que actualizamos
                {
                    try {
                        con = new bdConexion();
                        PreparedStatement pstm = (PreparedStatement) con.getConnection().prepareStatement("UPDATE rutabackup SET rutaBD='" + rutaCorregida + "'");
                        pstm.executeUpdate();
                        pstm.close();
                    } catch (SQLException e) {
                        System.out.println(e);
                    }
                    con.desconectar();
                }

            }//-------------
            catch (SQLException e) {
                System.out.println(e);
            }

        }
    }

    /*Generar copia de seguridad de la base de datos cuando se cierre el sistema
     * se guarda en la ruta por defecto o en la que se haya especificando en la opcion
     * destino del backupautomatico
     */
    void GenerarBackupAutomatico() throws SQLException {

        Calendar c = Calendar.getInstance();//creamos una instancia de la clase calendar de java
        //java.util.Date fecha = new Date();
        String DiaHoy = Integer.toString(c.get(Calendar.DATE));
        String MesHoy = Integer.toString(c.get(Calendar.MONTH) + 1);
        String AnioHoy = Integer.toString(c.get(Calendar.YEAR));

        try {
            con = new bdConexion();
            PreparedStatement pstm1 = (PreparedStatement) //con la siguente consulta obtnemos la ruta almacenada en la bd para guardar ahi la copia de seguridad
                    con.getConnection().prepareStatement("SELECT * FROM rutabackup");
            ResultSet res1 = pstm1.executeQuery();

            res1.last();
            if (res1.getRow() <= 0) {
//                JOptionPane.showMessageDialog(null, "No hay ruta especificada aun");   
                String rutaDefault = "C:\\BackUpClinicaDental";
                try {
                    PreparedStatement pstm = (PreparedStatement) con.getConnection().prepareStatement("insert into " + " rutabackup(rutaBD)" + "values (?)");

                    pstm.setString(1, rutaDefault);

                    pstm.execute();
                    pstm.close();
                } catch (SQLException e) {
                    System.out.print(e);
                }
            } else {
                String ruta = res1.getString("rutaBD");

                try {
                    Runtime runtime = Runtime.getRuntime();
                    File backupFile = new File(ruta + "\\" + DiaHoy + "-" + MesHoy + "-" + AnioHoy + ".sql");
                    FileWriter fw = new FileWriter(backupFile);

                    Process child = runtime.exec(System.getProperty("user.dir") + "/bin/mysqldump --opt --password=root --user=root --databases clinicadental");
                    InputStreamReader irs = new InputStreamReader(child.getInputStream());
                    BufferedReader br = new BufferedReader(irs);
                    String line;
                    while ((line = br.readLine()) != null) {
                        fw.write(line + "\n");
                    }
                    fw.close();
                    irs.close();
                    br.close();
                    JOptionPane.showMessageDialog(null, "Atencion se hizo una copia de seguridad de la BD \n en la siguiente direccion '" + ruta + "'", "Verificar", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error no se genero el archivo por el siguiente motivo:" + e.getMessage(), "Verificar", JOptionPane.ERROR_MESSAGE);
                }

            }//fin else
            res1.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
        con.desconectar();
    }

    /*Obtener Fecha del sistema actual*/
    public final void mostrarFechaActual() {
        String fecha = new SimpleDateFormat("EEEE dd 'de' MMMM 'del' YYYY").format(new Date());
        lblFechaActual.setText(fecha);
    }

    /*Metodo para mostrar la hora del sitema actual*/
    public final void mostrarHoraActual() {

        DateTimeFormatter formateador = DateTimeFormatter.ofPattern("HH:mm:ss a");
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(500);
                        lblEtiquetaReloj.setText(formateador.format(LocalDateTime.now()));
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        Thread hilo = new Thread(runnable);
        hilo.start();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEspecialista;
    private javax.swing.JButton btnExpedienteClinico;
    private javax.swing.JButton btnPacientes;
    private javax.swing.JButton btnRealizarConsulta;
    private javax.swing.JButton btnReservarCitas;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnServicios;
    private javax.swing.JButton btnTratamientos;
    private javax.swing.JDialog frmBuscarPaciente;
    private javax.swing.JDialog frmWorking;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuAgregarPacientes;
    private javax.swing.JMenuItem jMenuGestionCitas;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenu jMenuMedicamentoMedicina;
    private javax.swing.JMenu jMenuMedicamentos;
    private javax.swing.JMenuItem jMenuMedicinaAgregar;
    private javax.swing.JMenuItem jMenuRecetaPaciente;
    private javax.swing.JMenuItem jMenuReporteEspecialista;
    private javax.swing.JMenuItem jMenuReporteMedicamentos;
    private javax.swing.JMenu jMenuReportePacientes;
    private javax.swing.JMenu jMenuReporteReceta;
    private javax.swing.JMenuItem jMenuReporteServicios;
    private javax.swing.JMenuItem jMenuReporteTratamiento;
    private javax.swing.JMenuItem jMenuReservarCita;
    private javax.swing.JMenuItem jMenuSalir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JDesktopPane jdContenedor;
    private javax.swing.JMenuItem jmAgregarUsuarios;
    private javax.swing.JMenu jmBaseDatos;
    private javax.swing.JMenu jmConfiguracion;
    private javax.swing.JMenu jmConsultas;
    private javax.swing.JMenuItem jmCopiaSeguridad;
    private javax.swing.JMenuItem jmDatosGenerales;
    private javax.swing.JMenuItem jmDestinoBackup;
    private javax.swing.JMenu jmEmpresa;
    private javax.swing.JMenu jmPacientes;
    private javax.swing.JMenu jmReportes;
    private javax.swing.JMenuItem jmRestaurarbd;
    private javax.swing.JMenu jmSalir;
    private javax.swing.JMenu jmUsuarios;
    private javax.swing.JLabel lblEtiquetaReloj;
    private javax.swing.JLabel lblFechaActual;
    private javax.swing.JMenuBar mnPrincipal;
    private javax.swing.JTable tablaPacientes;
    private javax.swing.JTextField txtValorFiltro;
    private javax.swing.JTextField txtlogico;
    // End of variables declaration//GEN-END:variables
}
